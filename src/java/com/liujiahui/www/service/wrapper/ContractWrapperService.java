package com.liujiahui.www.service.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

/**
 * @author LiuJiaHui
 */
@SuppressWarnings("unchecked")
public class ContractWrapperService extends Contract {
    public static final String[] BINARY_ARRAY = {"","526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b8051610fae81611983565b92915050565b8051610fae8161199b565b805160058110610fae57600080fd5b600082601f830112610fde578081fd5b8135610ff1610fec8261192f565b611908565b915080825283602082850101111561100857600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611031578081fd5b815161103f610fec8261192f565b915080825283602082850101111561105657600080fd5b611067816020840160208601611953565b5092915050565b6000610120808385031215611081578182fd5b61108a81611908565b91505081518152602082015167ffffffffffffffff808211156110ac57600080fd5b6110b885838601611021565b60208401526110ca8560408601610fbf565b60408401526060840151606084015260808401519150808211156110ed57600080fd5b506110fa84828501611021565b60808301525061110d8360a08401610fb4565b60a082015261111f8360c08401610fb4565b60c08201526111318360e08401610fa3565b60e082015261010080830151818301525092915050565b6000806040838503121561115a578182fd5b823561116581611983565b946020939093013593505050565b60006020808385031215611185578182fd5b825167ffffffffffffffff8082111561119c578384fd5b81850186601f8201126111ad578485fd5b80519250818311156111bd578485fd5b6111ca8485850201611908565b8381528481019250818501865b85811015611200576111ee8a88845187010161106e565b855293860193908601906001016111d7565b509098975050505050505050565b60006020828403121561121f578081fd5b5035919050565b60008060408385031215611238578182fd5b50508035926020909101359150565b60008060006060848603121561125b578081fd5b835167ffffffffffffffff80821115611272578283fd5b61127e87838801611021565b94506020860151915080821115611293578283fd5b506112a086828701611021565b92505060408401516112b181611983565b809150509250925092565b600080600080608085870312156112d1578081fd5b843567ffffffffffffffff808211156112e8578283fd5b6112f488838901610fce565b9550602087013594506040870135915080821115611310578283fd5b5061131d87828801610fce565b949793965093946060013593505050565b60006020828403121561133f578081fd5b815167ffffffffffffffff811115611355578182fd5b6113618482850161106e565b949350505050565b60006020828403121561137a578081fd5b5051919050565b60008060408385031215611393578182fd5b8235915060208301356113a58161199b565b809150509250929050565b6000806000606084860312156113c4578081fd5b83359250602084013567ffffffffffffffff8111156113e1578182fd5b6113ed86828701610fce565b925050604084013590509250925092565b600080600060608486031215611412578081fd5b83519250602084015167ffffffffffffffff81111561142f578182fd5b61143b86828701611021565b925050604084015190509250925092565b6001600160a01b03169052565b15159052565b6005811061146957fe5b9052565b60008151808452611485816020860160208601611953565b601f01601f19169290920160200192915050565b600085516114ab818460208a01611953565b82018581528451906114c4826020808401908901611953565b60609490941b6bffffffffffffffffffffffff19166020949091019384015250506034019392505050565b60008682528551611507816020850160208a01611953565b80830186602082015285519150611525826040830160208901611953565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561120057603f1989840301855281516101208151855288820151818a8701526115f48287018261146d565b8984015192506116068a88018461145f565b60608481015190880152608080850151888303828a0152909350915061162c818361146d565b9250505060a08083015161164282880182611459565b505060c08083015161165682880182611459565b505060e08083015161166a8288018261144c565b505061010091820151949091019390935293860193908601906001016115c5565b90815260200190565b6000606082526116a7606083018661146d565b82810360208401526116b9818661146d565b91505060018060a01b0383166040830152949350505050565b6000604082526116e5604083018561146d565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252601d908201527f596f7520617265206e6f74206120726567697374657265642075736572000000604082015260600190565b6020808252600b908201526a4f7574206f66206461746560a81b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b602080825260149082015273125d195b481a5cc81b9bdd081cdbdb19081e595d60621b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b600084825260606020830152611890606083018561146d565b9050826040830152949350505050565b600088825260e060208301526118b960e083018961146d565b87604084015282810360608401526118d1818861146d565b608084019690965250506001600160a01b039290921660a083015260c090910152949350505050565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561192757600080fd5b604052919050565b600067ffffffffffffffff821115611945578081fd5b50601f01601f191660200190565b60005b8381101561196e578181015183820152602001611956565b8381111561197d576000848401525b50505050565b6001600160a01b038116811461199857600080fd5b50565b801515811461199857600080fdfea2646970667358221220ed9865b494ffe69fefbff6da279ef56bde9c8f2e575fcbad58ece735da2100ae64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","5b919050565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b8051610fbe81611993565b92915050565b8051610fbe816119ab565b805160058110610fbe57600080fd5b600082601f830112610fee578081fd5b8135611001610ffc8261193f565b611918565b915080825283602082850101111561101857600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611041578081fd5b815161104f610ffc8261193f565b915080825283602082850101111561106657600080fd5b611077816020840160208601611963565b5092915050565b6000610120808385031215611091578182fd5b61109a81611918565b91505081518152602082015167ffffffffffffffff808211156110bc57600080fd5b6110c885838601611031565b60208401526110da8560408601610fcf565b60408401526060840151606084015260808401519150808211156110fd57600080fd5b5061110a84828501611031565b60808301525061111d8360a08401610fc4565b60a082015261112f8360c08401610fc4565b60c08201526111418360e08401610fb3565b60e082015261010080830151818301525092915050565b6000806040838503121561116a578182fd5b823561117581611993565b946020939093013593505050565b60006020808385031215611195578182fd5b825167ffffffffffffffff808211156111ac578384fd5b81850186601f8201126111bd578485fd5b80519250818311156111cd578485fd5b6111da8485850201611918565b8381528481019250818501865b85811015611210576111fe8a88845187010161107e565b855293860193908601906001016111e7565b509098975050505050505050565b60006020828403121561122f578081fd5b5035919050565b60008060408385031215611248578182fd5b50508035926020909101359150565b60008060006060848603121561126b578081fd5b835167ffffffffffffffff80821115611282578283fd5b61128e87838801611031565b945060208601519150808211156112a3578283fd5b506112b086828701611031565b92505060408401516112c181611993565b809150509250925092565b600080600080608085870312156112e1578081fd5b843567ffffffffffffffff808211156112f8578283fd5b61130488838901610fde565b9550602087013594506040870135915080821115611320578283fd5b5061132d87828801610fde565b949793965093946060013593505050565b60006020828403121561134f578081fd5b815167ffffffffffffffff811115611365578182fd5b6113718482850161107e565b949350505050565b60006020828403121561138a578081fd5b5051919050565b600080604083850312156113a3578182fd5b8235915060208301356113b5816119ab565b809150509250929050565b6000806000606084860312156113d4578081fd5b83359250602084013567ffffffffffffffff8111156113f1578182fd5b6113fd86828701610fde565b925050604084013590509250925092565b600080600060608486031215611422578081fd5b83519250602084015167ffffffffffffffff81111561143f578182fd5b61144b86828701611031565b925050604084015190509250925092565b6001600160a01b03169052565b15159052565b6005811061147957fe5b9052565b60008151808452611495816020860160208601611963565b601f01601f19169290920160200192915050565b600085516114bb818460208a01611963565b82018581528451906114d4826020808401908901611963565b60609490941b6bffffffffffffffffffffffff19166020949091019384015250506034019392505050565b60008682528551611517816020850160208a01611963565b80830186602082015285519150611535826040830160208901611963565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561121057603f1989840301855281516101208151855288820151818a8701526116048287018261147d565b8984015192506116168a88018461146f565b60608481015190880152608080850151888303828a0152909350915061163c818361147d565b9250505060a08083015161165282880182611469565b505060c08083015161166682880182611469565b505060e08083015161167a8288018261145c565b505061010091820151949091019390935293860193908601906001016115d5565b90815260200190565b6000606082526116b7606083018661147d565b82810360208401526116c9818661147d565b91505060018060a01b0383166040830152949350505050565b6000604082526116f5604083018561147d565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b602080825260149082015273125d195b481a5cc81b9bdd081cdbdb19081e595d60621b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b6020808252600b908201526a4f7574206f66206461746560a81b604082015260600190565b6020808252601d908201527f596f7520617265206e6f74206120726567697374657265642075736572000000604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b6000848252606060208301526118a0606083018561147d565b9050826040830152949350505050565b600088825260e060208301526118c960e083018961147d565b87604084015282810360608401526118e1818861147d565b608084019690965250506001600160a01b039290921660a083015260c090910152949350505050565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561193757600080fd5b604052919050565b600067ffffffffffffffff821115611955578081fd5b50601f01601f191660200190565b60005b8381101561197e578181015183820152602001611966565b8381111561198d576000848401525b50505050565b6001600160a01b03811681146119a857600080fd5b50565b80151581146119a857600080fdfea264697066735822122057051b58cc9c910a6f6706d2343ee26e4dac3d14376b12ceac98810ed597a61564736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewItemAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeSet\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorageService.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorageService.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refundItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_BUYITEM = "buyItem";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSOLDITEMS = "getSoldItems";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_REFUNDITEM = "refundItem";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEITEM = "removeItem";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final Event ITEMSOLD_EVENT = new Event("ItemSold",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWITEMADD_EVENT = new Event("NewItemAdd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ContractWrapperService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ItemSoldEventResponse> getItemSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ITEMSOLD_EVENT, transactionReceipt);
        ArrayList<ItemSoldEventResponse> responses = new ArrayList<ItemSoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemSoldEventResponse typedResponse = new ItemSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeItemSoldEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeItemSoldEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NewItemAddEventResponse> getNewItemAddEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWITEMADD_EVENT, transactionReceipt);
        ArrayList<NewItemAddEventResponse> responses = new ArrayList<NewItemAddEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewItemAddEventResponse typedResponse = new NewItemAddEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewItemAddEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewItemAddEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt addItem(String name, BigInteger price, String description, BigInteger typeSet) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(String name, BigInteger price, String description, BigInteger typeSet, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(String name, BigInteger price, String description, BigInteger typeSet) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public Tuple1<BigInteger> getAddItemOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt buyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyItem(String seller, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBuyItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.Item> getSoldItems() throws ContractException {
        final Function function = new Function(FUNC_GETSOLDITEMS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt refundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refundItem(byte[] hash, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], BigInteger> getRefundItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REFUNDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt registerAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(BigInteger choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt removeItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeItem(BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getRemoveItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public static ContractWrapperService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractWrapperService(contractAddress, client, credential);
    }

    public static ContractWrapperService deploy(Client client, CryptoKeyPair credential, String storageAddress) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(storageAddress)));
        return deploy(ContractWrapperService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Item extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger itemType;

        public BigInteger price;

        public String description;

        public Boolean isSold;

        public Boolean isRemoved;

        public String seller;

        public byte[] hash;

        public Item(Uint256 id, Utf8String name, Uint8 itemType, Uint256 price, Utf8String description, Bool isSold, Bool isRemoved, Address seller, Bytes32 hash) {
            super(id,name,itemType,price,description,isSold,isRemoved,seller,hash);
            this.id = id.getValue();
            this.name = name.getValue();
            this.itemType = itemType.getValue();
            this.price = price.getValue();
            this.description = description.getValue();
            this.isSold = isSold.getValue();
            this.isRemoved = isRemoved.getValue();
            this.seller = seller.getValue();
            this.hash = hash.getValue();
        }

        public Item(BigInteger id, String name, BigInteger itemType, BigInteger price, String description, Boolean isSold, Boolean isRemoved, String seller, byte[] hash) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(itemType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Bool(isSold),new org.fisco.bcos.sdk.abi.datatypes.Bool(isRemoved),new org.fisco.bcos.sdk.abi.datatypes.Address(seller),new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash));
            this.id = id;
            this.name = name;
            this.itemType = itemType;
            this.price = price;
            this.description = description;
            this.isSold = isSold;
            this.isRemoved = isRemoved;
            this.seller = seller;
            this.hash = hash;
        }
    }

    public static class ItemSoldEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String buyer;

        public byte[] hash;
    }

    public static class NewItemAddEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String name;

        public BigInteger price;
    }
}