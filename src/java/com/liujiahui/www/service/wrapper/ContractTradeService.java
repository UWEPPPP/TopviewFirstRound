package com.liujiahui.www.service.wrapper;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class ContractTradeService extends Contract {
    public static final String[] BINARY_ARRAY = {"", "6000803e3d6000fd5b50506000805460ff60a01b191690555050505050565b6060806000610f8e33611079565b60011480610fa45750610fa033611079565b6002145b610fc05760405162461bcd60e51b81526004016102a890611ae5565b610fc933611079565b600214610fe85760405162461bcd60e51b81526004016102a890611b95565b60005460405163d650d12360e01b81526001600160a01b039091169063d650d12390611018908790600401611a52565b60006040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106c91908101906114ea565b9250925092509193909250565b60008054604051632fea7b8160e01b815282916001600160a01b031690632fea7b81906110aa90869060040161179d565b60206040518083038186803b1580156110c257600080fd5b505afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa919061160c565b9050806001141561110f576001915050610928565b8060021415611122576002915050610928565b6000915050610928565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b805161118381611d1d565b92915050565b805161118381611d32565b80516005811061118357600080fd5b600082601f8301126111b3578081fd5b81356111c66111c182611cbc565b611c75565b91508082528360208285010111156111dd57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611206578081fd5b81516112146111c182611cbc565b915080825283602082850101111561122b57600080fd5b61123c816020840160208601611ce0565b5092915050565b6000610120808385031215611256578182fd5b61125f81611c75565b91505081518152602082015167ffffffffffffffff8082111561128157600080fd5b61128d858386016111f6565b602084015261129f8560408601611194565b60408401526060840151606084015260808401519150808211156112c257600080fd5b506112cf848285016111f6565b6080830152506112e28360a08401611189565b60a08201526112f48360c08401611189565b60c08201526113068360e08401611178565b60e082015261010080830151818301525092915050565b6000806040838503121561132f578182fd5b823561133a81611d1d565b946020939093013593505050565b6000602080838503121561135a578182fd5b825167ffffffffffffffff80821115611371578384fd5b81850186601f820112611382578485fd5b805192506113926111c184611c9c565b83815284810190828601875b868110156114165781518501606080601f19838f030112156113be578a8bfd5b6113c781611c75565b8a83015181526040830151898111156113de578c8dfd5b6113ec8f8d838701016111f6565b8c830152506113fd8e838501611194565b604082015286525050928701929087019060010161139e565b50909998505050505050505050565b60006020808385031215611437578182fd5b825167ffffffffffffffff81111561144d578283fd5b80840185601f82011261145e578384fd5b8051915061146e6111c183611c9c565b82815283810190828501865b858110156114a3576114918a888451880101611243565b8452928601929086019060010161147a565b509098975050505050505050565b6000602082840312156114c2578081fd5b5035919050565b600080604083850312156114db578182fd5b50508035926020909101359150565b6000806000606084860312156114fe578081fd5b835167ffffffffffffffff80821115611515578283fd5b611521878388016111f6565b94506020860151915080821115611536578283fd5b50611543868287016111f6565b925050604084015161155481611d1d565b809150509250925092565b60008060008060808587031215611574578081fd5b843567ffffffffffffffff8082111561158b578283fd5b611597888389016111a3565b95506020870135945060408701359150808211156115b3578283fd5b506115c0878288016111a3565b949793965093946060013593505050565b6000602082840312156115e2578081fd5b815167ffffffffffffffff8111156115f8578182fd5b61160484828501611243565b949350505050565b60006020828403121561161d578081fd5b5051919050565b60008060408385031215611636578182fd5b82359150602083013561164881611d32565b809150509250929050565b600080600060608486031215611667578081fd5b83359250602084013567ffffffffffffffff811115611684578182fd5b611690868287016111a3565b925050604084013590509250925092565b6000806000606084860312156116b5578081fd5b83519250602084015167ffffffffffffffff8111156116d2578182fd5b6116de868287016111f6565b925050604084015190509250925092565b6001600160a01b03169052565b15159052565b61170b81611d10565b9052565b60008151808452611727816020860160208601611ce0565b601f01601f19169290920160200192915050565b60008682528551611753816020850160208a01611ce0565b80830186602082015285519150611771826040830160208901611ce0565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b0386168252846020830152608060408301526117f1608083018561170f565b905082606083015295945050505050565b6001600160a01b038981168252602082018990526101006040830181905260009161182f8483018b61170f565b8960608601528481036080860152611847818a61170f565b60a0860198909852509490941660c08301525060e001525095945050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b6001600160a01b03939093168352602083019190915260806040830181905260099083015268707265706172696e6760b81b60a0830152606082015260c00190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114a357603f19898403018552815160608151855288820151818a8701526119408287018261170f565b89840151925061194f83611d10565b9589019190915250509386019390860190600101611912565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114a357603f1989840301855281516101208151855288820151818a8701526119bb8287018261170f565b8984015192506119cd8a880184611702565b60608481015190880152608080850151888303828a015290935091506119f3818361170f565b9250505060a080830151611a09828801826116fc565b505060c080830151611a1d828801826116fc565b505060e080830151611a31828801826116ef565b5050610100918201519490910193909352938601939086019060010161198c565b90815260200190565b600060608252611a6e606083018661170f565b8281036020840152611a80818661170f565b91505060018060a01b0383166040830152949350505050565b600060408252611aac604083018561170f565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252601d908201527f596f7520617265206e6f74206120726567697374657265642075736572000000604082015260600190565b6020808252600b908201526a4f7574206f66206461746560a81b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b602080825260149082015273125d195b481a5cc81b9bdd081cdbdb19081e595d60621b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b600084825260606020830152611c65606083018561170f565b9050826040830152949350505050565b60405181810167ffffffffffffffff81118282101715611c9457600080fd5b604052919050565b600067ffffffffffffffff821115611cb2578081fd5b5060209081020190565b600067ffffffffffffffff821115611cd2578081fd5b50601f01601f191660200190565b60005b83811015611cfb578181015183820152602001611ce3565b83811115611d0a576000848401525b50505050565b60058110611d1a57fe5b50565b6001600160a01b0381168114611d1a57600080fd5b8015158114611d1a57600080fdfea264697066735822122087ab75de07f7597631af06f4fae023f914aa55b16cdbcdebe0a87c062e34461264736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526000805460ff60a01b1916905534801561001d57600080fd5b50604051611e23380380611e2383398101604081905261003c91610061565b600080546001600160a01b0319166001600160a01b039290921691909117905561008f565b600060208284031215610072578081fd5b81516001600160a01b0381168114610088578182fd5b9392505050565b611d858061009e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a90ddf2811610071578063a90ddf2814610153578063ac1d2a8314610168578063c0f25f431461017b578063c265079d14610190578063c609c659146101b2578063eda1cd8a146101d2576100b4565b8063036b4e41146100b957806314e6bf0d146100e457806350e5d8cb146100f957806355ea46391461010c578063695a5fb01461011f5780638108d7e414610132575b600080fd5b6100cc6100c73660046114c0565b6101e5565b6040516100db93929190611a6a565b60405180910390f35b6100f76100f23660046114c0565b6102e9565b005b6100f76101073660046114d8565b610350565b6100f761011a366004611662565b610659565b6100f761012d366004611633565b6106c6565b61014561014036600461156e565b610730565b6040516100db929190611c4d565b61015b61090d565b6040516100db9190611977565b6100f76101763660046114d8565b6109fd565b610183610a96565b6040516100db9190611a61565b6101a361019e3660046114c0565b610b17565b6040516100db93929190611c5b565b6101c56101c03660046114c0565b610c1c565b6040516100db91906118fd565b6100f76101e036600461132c565b610d0f565b60608060006101f333611088565b60011480610209575061020533611088565b6002145b61022f57604051636381e58960e11b815260040161022690611bc5565b60405180910390fd5b61023833611088565b60021461025857604051636381e58960e11b815260040161022690611bfc565b60005460405163036b4e4160e01b81526001600160a01b039091169063036b4e4190610288908790600401611a61565b60006040518083038186803b1580156102a057600080fd5b505afa1580156102b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102dc91908101906114f9565b9250925092509193909250565b6000546040516311da8d2b60e31b81526001600160a01b0390911690638ed469589061031b90339085906004016117c0565b600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b5050505050565b61035933611088565b6001148061036f575061036b33611088565b6002145b61038c57604051636381e58960e11b815260040161022690611bc5565b61039533611088565b6002146103b557604051636381e58960e11b815260040161022690611bfc565b6103bd61113b565b6000546040516332d03b5b60e01b81526001600160a01b03909116906332d03b5b906103ed908690600401611a61565b60006040518083038186803b15801561040557600080fd5b505afa158015610419573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261044191908101906115e0565b6000805460405163c265079d60e01b815292935090916001600160a01b039091169063c265079d90610477908790600401611a61565b60006040518083038186803b15801561048f57600080fd5b505afa1580156104a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104cb91908101906116b0565b505090508160a001516104f157604051636381e58960e11b815260040161022690611b4c565b8062093a8001421061051657604051636381e58960e11b815260040161022690611ba0565b6000546060830151604051630ec12e8560e21b81526001600160a01b0390921691633b04ba149161054c913391906004016117c0565b600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505060005460e085015160608601516040516311185c2760e01b81526001600160a01b0390931694506311185c2793506105b6926004016117c0565b600060405180830381600087803b1580156105d057600080fd5b505af11580156105e4573d6000803e3d6000fd5b50506000805460e086015160405163017ad3cf60e21b81526001600160a01b0390921694506305eb4f3c9350610621929091889190600401611898565b600060405180830381600087803b15801561063b57600080fd5b505af115801561064f573d6000803e3d6000fd5b5050505050505050565b6000546040516320871cfb60e11b81526001600160a01b039091169063410e39f69061068f9033908790879087906004016117d9565b600060405180830381600087803b1580156106a957600080fd5b505af11580156106bd573d6000803e3d6000fd5b50505050505050565b60005460405163fc9a58a560e01b81526001600160a01b039091169063fc9a58a5906106fa90859033908690600401611c2c565b600060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b505050505050565b60008061073c33611088565b60011480610752575061074e33611088565b6002145b61076f57604051636381e58960e11b815260040161022690611bc5565b61077833611088565b60011461079857604051636381e58960e11b815260040161022690611af4565b6000805460405163ba7dafab60e01b81526001600160a01b039091169063ba7dafab906107c99033906004016117ac565b60206040518083038186803b1580156107e157600080fd5b505afa1580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610819919061161b565b90506000818888883360405160200161083695949392919061174a565b60408051601f19818403018152908290528051602090910120600054637c42093560e01b83529092506001600160a01b031690637c4209359061088b90339086908d908d908d908d9086908b90600401611811565b600060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b50505050336001600160a01b03167f80e863492b63f6a162c0f7ef99ef9f59519410da2dc51148db147b762173afeb89896040516108f8929190611aa8565b60405180910390a29097909650945050505050565b606061091833611088565b6001148061092e575061092a33611088565b6002145b61094b57604051636381e58960e11b815260040161022690611bc5565b61095433611088565b60011461097457604051636381e58960e11b815260040161022690611af4565b600054604051637d23681b60e11b81526001600160a01b039091169063fa46d036906109a49033906004016117ac565b60006040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f89190810190611434565b905090565b610a0633611088565b60011480610a1c5750610a1833611088565b6002145b610a3957604051636381e58960e11b815260040161022690611bc5565b610a4233611088565b600114610a6257604051636381e58960e11b815260040161022690611af4565b600054604051635f2fcecd60e11b81526001600160a01b039091169063be5f9d9a906106fa90339086908690600401611877565b60008054604051630fc6ebe160e21b81526001600160a01b0390911690633f1baf8490610ac79033906004016117ac565b60206040518083038186803b158015610adf57600080fd5b505afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f8919061161b565b600060606000610b2633611088565b60011480610b3c5750610b3833611088565b6002145b610b5957604051636381e58960e11b815260040161022690611bc5565b610b6233611088565b600214610b8257604051636381e58960e11b815260040161022690611bfc565b6000805460405163c265079d60e01b815260609183916001600160a01b039091169063c265079d90610bb8908a90600401611a61565b60006040518083038186803b158015610bd057600080fd5b505afa158015610be4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0c91908101906116b0565b9199909850909650945050505050565b6060610c2733611088565b60011480610c3d5750610c3933611088565b6002145b610c5a57604051636381e58960e11b815260040161022690611bc5565b610c6333611088565b600214610c8357604051636381e58960e11b815260040161022690611bfc565b60005460405163d88ed0db60e01b81526001600160a01b039091169063d88ed0db90610cb3908590600401611a61565b60006040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d079190810190611357565b90505b919050565b600054600160a01b900460ff1615610d3a57604051636381e58960e11b815260040161022690611b24565b6000805460ff60a01b1916600160a01b179055610d5633611088565b60011480610d6c5750610d6833611088565b6002145b610d8957604051636381e58960e11b815260040161022690611bc5565b610d9233611088565b600214610db257604051636381e58960e11b815260040161022690611bfc565b610dba61113b565b6000546040516303915a0b60e21b81526001600160a01b0390911690630e45682c90610dec90869086906004016117c0565b60006040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e4091908101906115e0565b90508060a0015115610e6557604051636381e58960e11b815260040161022690611b7a565b610e6d610a96565b81606001511115610e9157604051636381e58960e11b815260040161022690611aca565b60005460405163017ad3cf60e21b81526001600160a01b03909116906305eb4f3c90610ec69086908690600190600401611898565b600060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505060005460608401516040516311185c2760e01b81526001600160a01b0390921693506311185c279250610f2e913391906004016117c0565b600060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b5050600054", "6060840151604051630ec12e8560e21b81526001600160a01b039092169350633b04ba149250610f96918791906004016117c0565b600060405180830381600087803b158015610fb057600080fd5b505af1158015610fc4573d6000803e3d6000fd5b50505050826001600160a01b03167f57d08a4fd3fc53e9e9ebd1eb805cee904d0715a7cee14e0c9448435632d11be2338361010001516040516110089291906117c0565b60405180910390a2600080546040516320871cfb60e11b81526001600160a01b039091169163410e39f6916110449187918791906004016118bb565b600060405180830381600087803b15801561105e57600080fd5b505af1158015611072573d6000803e3d6000fd5b50506000805460ff60a01b191690555050505050565b60008054604051638a70fadb60e01b815282916001600160a01b031690638a70fadb906110b99086906004016117ac565b60206040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611109919061161b565b9050806001141561111e576001915050610d0a565b8060021415611131576002915050610d0a565b6000915050610d0a565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b805161119281611d2c565b92915050565b805161119281611d41565b80516005811061119257600080fd5b600082601f8301126111c2578081fd5b81356111d56111d082611ccb565b611c84565b91508082528360208285010111156111ec57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611215578081fd5b81516112236111d082611ccb565b915080825283602082850101111561123a57600080fd5b61124b816020840160208601611cef565b5092915050565b6000610120808385031215611265578182fd5b61126e81611c84565b91505081518152602082015167ffffffffffffffff8082111561129057600080fd5b61129c85838601611205565b60208401526112ae85604086016111a3565b60408401526060840151606084015260808401519150808211156112d157600080fd5b506112de84828501611205565b6080830152506112f18360a08401611198565b60a08201526113038360c08401611198565b60c08201526113158360e08401611187565b60e082015261010080830151818301525092915050565b6000806040838503121561133e578182fd5b823561134981611d2c565b946020939093013593505050565b60006020808385031215611369578182fd5b825167ffffffffffffffff80821115611380578384fd5b81850186601f820112611391578485fd5b805192506113a16111d084611cab565b83815284810190828601875b868110156114255781518501606080601f19838f030112156113cd578a8bfd5b6113d681611c84565b8a83015181526040830151898111156113ed578c8dfd5b6113fb8f8d83870101611205565b8c8301525061140c8e8385016111a3565b60408201528652505092870192908701906001016113ad565b50909998505050505050505050565b60006020808385031215611446578182fd5b825167ffffffffffffffff81111561145c578283fd5b80840185601f82011261146d578384fd5b8051915061147d6111d083611cab565b82815283810190828501865b858110156114b2576114a08a888451880101611252565b84529286019290860190600101611489565b509098975050505050505050565b6000602082840312156114d1578081fd5b5035919050565b600080604083850312156114ea578182fd5b50508035926020909101359150565b60008060006060848603121561150d578081fd5b835167ffffffffffffffff80821115611524578283fd5b61153087838801611205565b94506020860151915080821115611545578283fd5b5061155286828701611205565b925050604084015161156381611d2c565b809150509250925092565b60008060008060808587031215611583578081fd5b843567ffffffffffffffff8082111561159a578283fd5b6115a6888389016111b2565b95506020870135945060408701359150808211156115c2578283fd5b506115cf878288016111b2565b949793965093946060013593505050565b6000602082840312156115f1578081fd5b815167ffffffffffffffff811115611607578182fd5b61161384828501611252565b949350505050565b60006020828403121561162c578081fd5b5051919050565b60008060408385031215611645578182fd5b82359150602083013561165781611d41565b809150509250929050565b600080600060608486031215611676578081fd5b83359250602084013567ffffffffffffffff811115611693578182fd5b61169f868287016111b2565b925050604084013590509250925092565b6000806000606084860312156116c4578081fd5b83519250602084015167ffffffffffffffff8111156116e1578182fd5b6116ed86828701611205565b925050604084015190509250925092565b6001600160a01b03169052565b15159052565b61171a81611d1f565b9052565b60008151808452611736816020860160208601611cef565b601f01601f19169290920160200192915050565b60008682528551611762816020850160208a01611cef565b80830186602082015285519150611780826040830160208901611cef565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038616825284602083015260806040830152611800608083018561171e565b905082606083015295945050505050565b6001600160a01b038981168252602082018990526101006040830181905260009161183e8483018b61171e565b8960608601528481036080860152611856818a61171e565b60a0860198909852509490941660c08301525060e001525095945050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b6001600160a01b03939093168352602083019190915260806040830181905260099083015268707265706172696e6760b81b60a0830152606082015260c00190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114b257603f19898403018552815160608151855288820151818a87015261194f8287018261171e565b89840151925061195e83611d1f565b9589019190915250509386019390860190600101611921565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114b257603f1989840301855281516101208151855288820151818a8701526119ca8287018261171e565b8984015192506119dc8a880184611711565b60608481015190880152608080850151888303828a01529093509150611a02818361171e565b9250505060a080830151611a188288018261170b565b505060c080830151611a2c8288018261170b565b505060e080830151611a40828801826116fe565b5050610100918201519490910193909352938601939086019060010161199b565b90815260200190565b600060608252611a7d606083018661171e565b8281036020840152611a8f818661171e565b91505060018060a01b0383166040830152949350505050565b600060408252611abb604083018561171e565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b602080825260149082015273125d195b481a5cc81b9bdd081cdbdb19081e595d60621b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b6020808252600b908201526a4f7574206f66206461746560a81b604082015260600190565b6020808252601d908201527f596f7520617265206e6f74206120726567697374657265642075736572000000604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b600084825260606020830152611c74606083018561171e565b9050826040830152949350505050565b60405181810167ffffffffffffffff81118282101715611ca357600080fd5b604052919050565b600067ffffffffffffffff821115611cc1578081fd5b5060209081020190565b600067ffffffffffffffff821115611ce1578081fd5b50601f01601f191660200190565b60005b83811015611d0a578181015183820152602001611cf2565b83811115611d19576000848401525b50505050565b60058110611d2957fe5b50565b6001600160a01b0381168114611d2957600080fd5b8015158114611d2957600080fdfea26469706673582212200556372042ca152740e5d68972a274b24cfcfc0ad2d5e53ba3d10761fee6684564736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewItemAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeSet\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refundItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"showWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_BUYITEM = "buyItem";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSOLDITEMS = "getSoldItems";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_REFUNDITEM = "refundItem";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEITEM = "removeItem";

    public static final String FUNC_SHOWWHOLELIFE = "showWholeLife";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final Event ITEMSOLD_EVENT = new Event("ItemSold",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>() {
            }, new TypeReference<Bytes32>() {
            }));
    ;

    public static final Event NEWITEMADD_EVENT = new Event("NewItemAdd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    protected ContractTradeService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static ContractTradeService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractTradeService(contractAddress, client, credential);
    }

    public static ContractTradeService deploy(Client client, CryptoKeyPair credential, String storageAddress) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(storageAddress)));
        return deploy(ContractTradeService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public List<ItemSoldEventResponse> getItemSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ITEMSOLD_EVENT, transactionReceipt);
        ArrayList<ItemSoldEventResponse> responses = new ArrayList<ItemSoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemSoldEventResponse typedResponse = new ItemSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeItemSoldEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeItemSoldEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public List<NewItemAddEventResponse> getNewItemAddEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWITEMADD_EVENT, transactionReceipt);
        ArrayList<NewItemAddEventResponse> responses = new ArrayList<NewItemAddEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewItemAddEventResponse typedResponse = new NewItemAddEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewItemAddEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeNewItemAddEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public TransactionReceipt addItem(String name, BigInteger price, String description, BigInteger typeSet) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(String name, BigInteger price, String description, BigInteger typeSet, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(String name, BigInteger price, String description, BigInteger typeSet) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getAddItemOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Bytes32>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public TransactionReceipt buyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyItem(String seller, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBuyItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Address>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.Item> getSoldItems() throws ContractException {
        final Function function = new Function(FUNC_GETSOLDITEMS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt refundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refundItem(byte[] hash, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], BigInteger> getRefundItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REFUNDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt registerAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(BigInteger choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt removeItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeItem(BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getRemoveItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
        );
    }

    public DynamicArray<ContractStorageService.ItemLife> showWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_SHOWWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt updateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public static class ItemSoldEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String buyer;

        public byte[] hash;
    }

    public static class NewItemAddEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String name;

        public BigInteger price;
    }
}