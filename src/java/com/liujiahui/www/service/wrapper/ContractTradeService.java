package com.liujiahui.www.service.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ContractTradeService extends Contract {
    public static final String[] BINARY_ARRAY = {"","","3737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b6000602082526116136020830184611ab2565b600060408252611e286040830185611ab2565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b6000848252606060208301526120296060830185611a86565b9050826040830152949350505050565b60405181810167ffffffffffffffff8111828210171561205857600080fd5b604052919050565b600067ffffffffffffffff821115612076578081fd5b5060209081020190565b600067ffffffffffffffff821115612096578081fd5b50601f01601f191660200190565b60005b838110156120bf5781810151838201526020016120a7565b838111156120ce576000848401525b50505050565b600581106120de57fe5b50565b6001600160a01b03811681146120de57600080fd5b80151581146120de57600080fd5b600581106120de57600080fdfea264697066735822122026ad15c166224e7779a6496f03e148f13612a99316bee12c5e811dc68be8a29c64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","6560a81b604082015260600190565b6020808252601d908201527f596f7520617265206e6f74206120726567697374657265642075736572000000604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b6000602082526116236020830184611ac2565b600060408252611e386040830185611ac2565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b6000848252606060208301526120396060830185611a96565b9050826040830152949350505050565b60405181810167ffffffffffffffff8111828210171561206857600080fd5b604052919050565b600067ffffffffffffffff821115612086578081fd5b5060209081020190565b600067ffffffffffffffff8211156120a6578081fd5b50601f01601f191660200190565b60005b838110156120cf5781810151838201526020016120b7565b838111156120de576000848401525b50505050565b600581106120ee57fe5b50565b6001600160a01b03811681146120ee57600080fd5b80151581146120ee57600080fd5b600581106120ee57600080fdfea264697066735822122097058cdb3d4ef43bccd7e40328adaa3e4a6cea5804323762df4362179872ce3664736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewItemAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSingleItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"chioce\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"handing_feedback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refundItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedbacker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"resolveAppeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"showSupplierToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"showWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_BUYITEM = "buyItem";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSINGLEITEM = "getSingleItem";

    public static final String FUNC_GETSOLDITEMS = "getSoldItems";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_HANDING_FEEDBACK = "handing_feedback";

    public static final String FUNC_REFUNDITEM = "refundItem";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEITEM = "removeItem";

    public static final String FUNC_RESOLVEAPPEAL = "resolveAppeal";

    public static final String FUNC_SHOWSUPPLIERTOKEN = "showSupplierToken";

    public static final String FUNC_SHOWWHOLELIFE = "showWholeLife";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final Event ITEMSOLD_EVENT = new Event("ItemSold",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWITEMADD_EVENT = new Event("NewItemAdd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ContractTradeService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ItemSoldEventResponse> getItemSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ITEMSOLD_EVENT, transactionReceipt);
        ArrayList<ItemSoldEventResponse> responses = new ArrayList<ItemSoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemSoldEventResponse typedResponse = new ItemSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeItemSoldEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeItemSoldEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NewItemAddEventResponse> getNewItemAddEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWITEMADD_EVENT, transactionReceipt);
        ArrayList<NewItemAddEventResponse> responses = new ArrayList<NewItemAddEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewItemAddEventResponse typedResponse = new NewItemAddEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewItemAddEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewItemAddEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt addItem(String name, BigInteger price, String description, BigInteger typeSet, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(String name, BigInteger price, String description, BigInteger typeSet, BigInteger counter, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(String name, BigInteger price, String description, BigInteger typeSet, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, BigInteger, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getAddItemOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public TransactionReceipt buyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyItem(String seller, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBuyItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public ContractStorageService.Item getSingleItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSINGLEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public DynamicArray<ContractStorageService.Item> getSoldItems() throws ContractException {
        final Function function = new Function(FUNC_GETSOLDITEMS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt handing_feedback(Boolean chioce, byte[] hash) {
        final Function function = new Function(
                FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(chioce),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] handing_feedback(Boolean chioce, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(chioce),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForHanding_feedback(Boolean chioce, byte[] hash) {
        final Function function = new Function(
                FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(chioce),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<Boolean, byte[]> getHanding_feedbackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, byte[]>(

                (Boolean) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public TransactionReceipt refundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refundItem(byte[] hash, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], BigInteger> getRefundItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REFUNDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt registerAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(BigInteger choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt removeItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeItem(BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getRemoveItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
        );
    }

    public TransactionReceipt resolveAppeal(String feedbacker, String supplier, BigInteger token, Boolean choice) {
        final Function function = new Function(
                FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(token),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] resolveAppeal(String feedbacker, String supplier, BigInteger token, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(token),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForResolveAppeal(String feedbacker, String supplier, BigInteger token, Boolean choice) {
        final Function function = new Function(
                FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(token),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, Boolean> getResolveAppealInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (Boolean) results.get(3).getValue()
        );
    }

    public BigInteger showSupplierToken(String supplier) throws ContractException {
        final Function function = new Function(FUNC_SHOWSUPPLIERTOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<ContractStorageService.ItemLife> showWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_SHOWWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt updateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public static ContractTradeService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractTradeService(contractAddress, client, credential);
    }

    public static ContractTradeService deploy(Client client, CryptoKeyPair credential, String storageAddress) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(storageAddress)));
        return deploy(ContractTradeService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }


    public static class ItemSoldEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String buyer;

        public byte[] hash;
    }

    public static class NewItemAddEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String name;

        public BigInteger price;
    }
}