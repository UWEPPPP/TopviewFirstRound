package com.liujiahui.www.service.wrapper;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class ContractStorageService extends Contract {
    public static final String[] BINARY_ARRAY = {"", "0191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b5050509183525050600282015460209091019060ff16600481111561102a57fe5b600481111561103557fe5b8152600382015460208083019190915260048301805460408051601f600260001961010060018716150201909416939093049283018590048502810185018252828152940193928301828280156110cd5780601f106110a2576101008083540402835291602001916110cd565b820191906000526020600020905b8154815290600101906020018083116110b057829003601f168201915b5050509183525050600582015460ff8082161515602080850191909152610100830490911615156040840152620100009091046001600160a01b031660608301526006909201546080909101529082526001929092019101610f42565b60008181526003602090815260408083206005810154600180830180548551600261010094831615949094026000190190911692909204601f81018790048702830187019095528482526060968796909591936004860193620100009091046001600160a01b03169290918591908301828280156111e95780601f106111be576101008083540402835291602001916111e9565b820191906000526020600020905b8154815290600101906020018083116111cc57829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156112775780601f1061124c57610100808354040283529160200191611277565b820191906000526020600020905b81548152906001019060200180831161125a57829003601f168201915b50505050509150935093509350509193909250565b6001602081905260009182526040909120805491015482565b6001600160a01b031660009081526020819052604090205490565b6001600160a01b0390911660009081526020819052604090208054919091039055565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061137057805160ff191683800117855561139d565b8280016001018555821561139d579182015b8281111561139d578251825591602001919060010190611382565b506113a99291506113ad565b5090565b6113c791905b808211156113a957600081556001016113b3565b90565b80356001600160a01b03811681146105ed57600080fd5b600082601f8301126113f1578081fd5b813567ffffffffffffffff80821115611408578283fd5b604051601f8301601f191681016020018281118282101715611428578485fd5b60405282815292508284830160200186101561144357600080fd5b8260208601602083013760006020848301015250505092915050565b600060208284031215611470578081fd5b61147a83836113ca565b9392505050565b60008060408385031215611493578081fd5b61149d84846113ca565b946020939093013593505050565b6000806000606084860312156114bf578081fd5b83356001600160a01b03811681146114d5578182fd5b925060208401359150604084013580151581146114f0578182fd5b809150509250925092565b60008060008060808587031215611510578081fd5b61151a86866113ca565b935060208501359250604085013567ffffffffffffffff81111561153c578182fd5b611548878288016113e1565b949793965093946060013593505050565b600080600080600080600080610100898b031215611575578384fd5b61157f8a8a6113ca565b975060208901359650604089013567ffffffffffffffff808211156115a2578586fd5b6115ae8c838d016113e1565b975060608b0135965060808b01359150808211156115ca578586fd5b506115d78b828c016113e1565b94505060a089013592506115ee8a60c08b016113ca565b915060e089013590509295985092959890939650565b600080600060608486031215611618578283fd5b61162285856113ca565b95602085013595506040909401359392505050565b600060208284031215611648578081fd5b5035919050565b600080600060608486031215611663578283fd5b8335925061167485602086016113ca565b9150604084013580151581146114f0578182fd5b6001600160a01b03169052565b15159052565b6116a48161194e565b9052565b60008151808452815b818110156116cd576020818501810151868301820152016116b1565b818111156116de5782602083870101525b50601f01601f19169290920160200192915050565b6000610120825184526020830151816020860152611713828601826116a8565b60408501519250611727604087018461169b565b6060850151606087015260808501519250858103608087015261174a81846116a8565b91505060a0840151915061176160a0860183611695565b60c0840151915061177560c0860183611695565b60e0840151915061178960e0860183611688565b61010093840151949093019390935250919050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561181857603f19898403018552815160608151855288820151818a8701526117f0828701826116a8565b8984015192506117ff8361194e565b95890191909152505093860193908601906001016117c2565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561187957603f198886030184526118678583516116f3565b9450928501929085019060010161184b565b5092979650505050505050565b60006060825261189960608301866116a8565b82810360208401526118ab81866116a8565b91505060018060a01b0383166040830152949350505050565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b60006020825261147a60208301846116f3565b90815260200190565b60008482526060602083015261193060608301856116a8565b9050826040830152949350505050565b918252602082015260400190565b6005811061195857fe5b5056fea26469706673582212203a0923e680513f072e52fc26dbc96427521d9c073346783c77d2eda5be85b2d864736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"", "80601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b5050509183525050600282015460209091019060ff16600481111561104757fe5b600481111561105257fe5b8152505081526020019060010190610f60565b505050509050919050565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561106557838290600052602060002090600702016040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561116f5780601f106111445761010080835404028352916020019161116f565b820191906000526020600020905b81548152906001019060200180831161115257829003601f168201915b5050509183525050600282015460209091019060ff16600481111561119057fe5b600481111561119b57fe5b8152600382015460208083019190915260048301805460408051601f600260001961010060018716150201909416939093049283018590048502810185018252828152940193928301828280156112335780601f1061120857610100808354040283529160200191611233565b820191906000526020600020905b81548152906001019060200180831161121657829003601f168201915b5050509183525050600582015460ff8082161515602080850191909152610100830490911615156040840152620100009091046001600160a01b0316606083015260069092015460809091015290825260019290920191016110a8565b6001600160a01b03821660009081526002602052604090208054829190859081106112b757fe5b906000526020600020906007020160050160016101000a81548160ff021916908315150217905550505050565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061137157805160ff191683800117855561139e565b8280016001018555821561139e579182015b8281111561139e578251825591602001919060010190611383565b506113aa9291506113ae565b5090565b6113c891905b808211156113aa57600081556001016113b4565b90565b80356001600160a01b038116811461071557600080fd5b600082601f8301126113f2578081fd5b813567ffffffffffffffff80821115611409578283fd5b604051601f8301601f191681016020018281118282101715611429578485fd5b60405282815292508284830160200186101561144457600080fd5b8260208601602083013760006020848301015250505092915050565b600060208284031215611471578081fd5b61147b83836113cb565b9392505050565b60008060408385031215611494578081fd5b61149e84846113cb565b946020939093013593505050565b6000806000606084860312156114c0578081fd5b83356001600160a01b03811681146114d6578182fd5b925060208401359150604084013580151581146114f1578182fd5b809150509250925092565b60008060008060808587031215611511578081fd5b61151b86866113cb565b935060208501359250604085013567ffffffffffffffff81111561153d578182fd5b611549878288016113e2565b949793965093946060013593505050565b600080600080600080600080610100898b031215611576578384fd5b6115808a8a6113cb565b975060208901359650604089013567ffffffffffffffff808211156115a3578586fd5b6115af8c838d016113e2565b975060608b0135965060808b01359150808211156115cb578586fd5b506115d88b828c016113e2565b94505060a089013592506115ef8a60c08b016113cb565b915060e089013590509295985092959890939650565b600080600060608486031215611619578283fd5b61162385856113cb565b95602085013595506040909401359392505050565b600060208284031215611649578081fd5b5035919050565b600080600060608486031215611664578283fd5b8335925061167585602086016113cb565b9150604084013580151581146114f1578182fd5b6001600160a01b03169052565b15159052565b6116a58161194f565b9052565b60008151808452815b818110156116ce576020818501810151868301820152016116b2565b818111156116df5782602083870101525b50601f01601f19169290920160200192915050565b6000610120825184526020830151816020860152611714828601826116a9565b60408501519250611728604087018461169c565b6060850151606087015260808501519250858103608087015261174b81846116a9565b91505060a0840151915061176260a0860183611696565b60c0840151915061177660c0860183611696565b60e0840151915061178a60e0860183611689565b61010093840151949093019390935250919050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561181957603f19898403018552815160608151855288820151818a8701526117f1828701826116a9565b8984015192506118008361194f565b95890191909152505093860193908601906001016117c3565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561187a57603f198886030184526118688583516116f4565b9450928501929085019060010161184c565b5092979650505050505050565b60006060825261189a60608301866116a9565b82810360208401526118ac81866116a9565b91505060018060a01b0383166040830152949350505050565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b60006020825261147b60208301846116f4565b90815260200190565b60008482526060602083015261193160608301856116a9565b9050826040830152949350505050565b918252602082015260400190565b6005811061195957fe5b5056fea2646970667358221220365d97a80b5112b4e28e33998b74626c5462d6033a527dbf503446de039833b164736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeSet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerAllItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSellerItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSellerItemsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSingleItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"itemIsSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chioce\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeOrRestoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BALANCES = "Balances";

    public static final String FUNC_USERLIST = "UserList";

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_DECREASEBALANCE = "decreaseBalance";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETIDENTITY = "getIdentity";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSELLERALLITEMS = "getSellerAllItems";

    public static final String FUNC_GETSELLERITEM = "getSellerItem";

    public static final String FUNC_GETSELLERITEMSINDEX = "getSellerItemsIndex";

    public static final String FUNC_GETSINGLEITEM = "getSingleItem";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETWHOLELIFE = "getWholeLife";

    public static final String FUNC_INCREASEBALANCE = "increaseBalance";

    public static final String FUNC_ITEMISSOLD = "itemIsSold";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEORRESTOREITEM = "removeOrRestoreItem";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    protected ContractStorageService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static ContractStorageService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractStorageService(contractAddress, client, credential);
    }

    public static ContractStorageService deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ContractStorageService.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public BigInteger Balances(String param0) throws ContractException {
        final Function function = new Function(FUNC_BALANCES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<BigInteger, BigInteger> UserList(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt addItem(String owner, BigInteger id, String name, BigInteger price, String description, BigInteger typeSet, String seller, byte[] hash) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(String owner, BigInteger id, String name, BigInteger price, String description, BigInteger typeSet, String seller, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(String owner, BigInteger id, String name, BigInteger price, String description, BigInteger typeSet, String seller, byte[] hash) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, byte[]> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Bytes32>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, String, BigInteger, String, BigInteger, String, byte[]>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (byte[]) results.get(7).getValue()
        );
    }

    public TransactionReceipt decreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] decreaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDecreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDecreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance(String user) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getIdentity(String user) throws ContractException {
        final Function function = new Function(FUNC_GETIDENTITY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Address>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.Item> getSellerAllItems(String seller) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERALLITEMS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public ContractStorageService.Item getSellerItem(String seller, BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {
                }));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public BigInteger getSellerItemsIndex(String owner) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEMSINDEX,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public ContractStorageService.Item getSingleItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSINGLEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {
                }));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.ItemLife> getWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt increaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] increaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIncreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getIncreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt itemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] itemIsSold(String seller, BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForItemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, Boolean> getItemIsSoldInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ITEMISSOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt registerAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(String userAddress, BigInteger chioce, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt removeOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeOrRestoreItem(BigInteger index, String owner, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, Boolean> getRemoveOrRestoreItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt updateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(String owner, BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt updateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(String owner, BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public static class Item extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger itemType;

        public BigInteger price;

        public String description;

        public Boolean isSold;

        public Boolean isRemoved;

        public String seller;

        public byte[] hash;

        public Item(Uint256 id, Utf8String name, Uint8 itemType, Uint256 price, Utf8String description, Bool isSold, Bool isRemoved, Address seller, Bytes32 hash) {
            super(id, name, itemType, price, description, isSold, isRemoved, seller, hash);
            this.id = id.getValue();
            this.name = name.getValue();
            this.itemType = itemType.getValue();
            this.price = price.getValue();
            this.description = description.getValue();
            this.isSold = isSold.getValue();
            this.isRemoved = isRemoved.getValue();
            this.seller = seller.getValue();
            this.hash = hash.getValue();
        }

        public Item(BigInteger id, String name, BigInteger itemType, BigInteger price, String description, Boolean isSold, Boolean isRemoved, String seller, byte[] hash) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(itemType), new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price), new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description), new org.fisco.bcos.sdk.abi.datatypes.Bool(isSold), new org.fisco.bcos.sdk.abi.datatypes.Bool(isRemoved), new org.fisco.bcos.sdk.abi.datatypes.Address(seller), new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash));
            this.id = id;
            this.name = name;
            this.itemType = itemType;
            this.price = price;
            this.description = description;
            this.isSold = isSold;
            this.isRemoved = isRemoved;
            this.seller = seller;
            this.hash = hash;
        }
    }

    public static class ItemLife extends DynamicStruct {
        public BigInteger date;

        public String place;

        public BigInteger status;

        public ItemLife(Uint256 date, Utf8String place, Uint8 status) {
            super(date, place, status);
            this.date = date.getValue();
            this.place = place.getValue();
            this.status = status.getValue();
        }

        public ItemLife(BigInteger date, String place, BigInteger status) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place), new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status));
            this.date = date;
            this.place = place;
            this.status = status;
        }
    }
}