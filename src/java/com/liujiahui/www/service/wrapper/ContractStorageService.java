package com.liujiahui.www.service.wrapper;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ContractStorageService extends Contract {
    public static final String[] BINARY_ARRAY = {"","","565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b61203591905b80821115611fcb5760008155600101612021565b90565b80356001600160a01b0381168114610d2557600080fd5b80358015158114610d2557600080fd5b803560058110610d2557600080fd5b600082601f83011261207e578081fd5b813567ffffffffffffffff811115612094578182fd5b6120a7601f8201601f19166020016127c7565b91508082528360208285010111156120be57600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156120e8578081fd5b6120f28383612038565b9392505050565b6000806040838503121561210b578081fd5b6121158484612038565b946020939093013593505050565b600080600060608486031215612137578081fd5b83356121428161282b565b95602085013595506040909401359392505050565b60008060408385031215612169578182fd5b82356121748161282b565b9150602083013567ffffffffffffffff81111561218f578182fd5b61219b8582860161206e565b9150509250929050565b6000806040838503121561210b578182fd5b6000806000606084860312156121cb578283fd5b83356121d68161282b565b925060208401359150604084013580151581146121f1578182fd5b809150509250925092565b60008060008060808587031215612211578081fd5b61221b8686612038565b935060208501359250604085013567ffffffffffffffff81111561223d578182fd5b6122498782880161206e565b949793965093946060013593505050565b60008060006060848603121561226e578283fd5b6121428585612038565b600060208284031215612289578081fd5b5035919050565b600080604083850312156122a2578182fd5b50508035926020909101359150565b600080604083850312156122c3578182fd5b823567ffffffffffffffff808211156122da578384fd5b6101209185018087038313156122ee578485fd5b6122f7836127c7565b81358152602082013593508284111561230e578586fd5b61231a8885840161206e565b602082015261232c886040840161205f565b604082015260608201356060820152608082013593508284111561234e578586fd5b61235a8885840161206e565b608082015261236c8860a0840161204f565b60a082015261237e8860c0840161204f565b60c08201526123908860e08401612038565b60e082015261010091820135918101919091529660209590950135955050505050565b6000806000606084860312156123c7578283fd5b833592506123d88560208601612038565b91506123e7856040860161204f565b90509250925092565b6001600160a01b03169052565b15159052565b61240c8161281e565b9052565b600081518084526124288160208601602086016127ee565b601f01601f19169290920160200192915050565b600061012082518452602083015181602086015261245c82860182612410565b604085015192506124706040870184612403565b606085015160608701526080850151925085810360808701526124938184612410565b91505060a084015191506124aa60a08601836123fd565b60c084015191506124be60c08601836123fd565b60e084015191506124d260e08601836123f0565b61010093840151949093019390935250919050565b600082516124f98184602087016127ee565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561257d57603f19898403018552815160608151855288820151818a87015261255582870182612410565b8984015192506125648361281e565b9589019190915250509386019390860190600101612527565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156125de57603f198886030184526125cc85835161243c565b945092850192908501906001016125b0565b5092979650505050505050565b6000606082526125fe6060830186612410565b82810360208401526126108186612410565b91505060018060a01b0383166040830152949350505050565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b602080825260079082015266125b9d985b1a5960ca1b604082015260600190565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b6000602082526120f2602083018461243c565b90815260200190565b6000848252606060208301526126fa6060830185612410565b90506127058361281e565b826040830152949350505050565b60006101208b835280602084015261272d8184018c612410565b6127368b61281e565b8a60408501528960608501528381036080850152612754818a612410565b97151560a085015250505092151560c08401526001600160a01b039190911660e08301526101009091015295945050505050565b6000848252606060208301526127a16060830185612410565b9050826040830152949350505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156127e657600080fd5b604052919050565b60005b838110156128095781810151838201526020016127f1565b83811115612818576000848401525b50505050565b6005811061282857fe5b50565b6001600160a01b038116811461282857600080fdfea264697066735822122063ee6510defdcbd7570871208252329ce19a56b3d20b35e9a601bbe3516d3d5d64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","600052602060002090601f016020900481019282601f10611ff957805160ff1916838001178555612026565b82800160010185558215612026579182015b8281111561202657825182559160200191906001019061200b565b50612032929150612036565b5090565b61205091905b80821115612032576000815560010161203c565b90565b80356001600160a01b03811681146109d057600080fd5b803580151581146109d057600080fd5b8035600581106109d057600080fd5b600082601f830112612099578081fd5b813567ffffffffffffffff8111156120af578182fd5b6120c2601f8201601f19166020016127e2565b91508082528360208285010111156120d957600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215612103578081fd5b61210d8383612053565b9392505050565b60008060408385031215612126578081fd5b6121308484612053565b946020939093013593505050565b600080600060608486031215612152578081fd5b833561215d81612846565b95602085013595506040909401359392505050565b60008060408385031215612184578182fd5b823561218f81612846565b9150602083013567ffffffffffffffff8111156121aa578182fd5b6121b685828601612089565b9150509250929050565b60008060408385031215612126578182fd5b6000806000606084860312156121e6578283fd5b83356121f181612846565b9250602084013591506040840135801515811461220c578182fd5b809150509250925092565b6000806000806080858703121561222c578081fd5b6122368686612053565b935060208501359250604085013567ffffffffffffffff811115612258578182fd5b61226487828801612089565b949793965093946060013593505050565b600080600060608486031215612289578283fd5b61215d8585612053565b6000602082840312156122a4578081fd5b5035919050565b600080604083850312156122bd578182fd5b50508035926020909101359150565b600080604083850312156122de578182fd5b823567ffffffffffffffff808211156122f5578384fd5b610120918501808703831315612309578485fd5b612312836127e2565b813581526020820135935082841115612329578586fd5b61233588858401612089565b6020820152612347886040840161207a565b6040820152606082013560608201526080820135935082841115612369578586fd5b61237588858401612089565b60808201526123878860a0840161206a565b60a08201526123998860c0840161206a565b60c08201526123ab8860e08401612053565b60e082015261010091820135918101919091529660209590950135955050505050565b6000806000606084860312156123e2578283fd5b833592506123f38560208601612053565b9150612402856040860161206a565b90509250925092565b6001600160a01b03169052565b15159052565b61242781612839565b9052565b60008151808452612443816020860160208601612809565b601f01601f19169290920160200192915050565b60006101208251845260208301518160208601526124778286018261242b565b6040850151925061248b604087018461241e565b606085015160608701526080850151925085810360808701526124ae818461242b565b91505060a084015191506124c560a0860183612418565b60c084015191506124d960c0860183612418565b60e084015191506124ed60e086018361240b565b61010093840151949093019390935250919050565b60008251612514818460208701612809565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561259857603f19898403018552815160608151855288820151818a8701526125708287018261242b565b89840151925061257f83612839565b9589019190915250509386019390860190600101612542565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156125f957603f198886030184526125e7858351612457565b945092850192908501906001016125cb565b5092979650505050505050565b600060608252612619606083018661242b565b828103602084015261262b818661242b565b91505060018060a01b0383166040830152949350505050565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b602080825260079082015266125b9d985b1a5960ca1b604082015260600190565b60006020825261210d6020830184612457565b90815260200190565b600084825260606020830152612715606083018561242b565b905061272083612839565b826040830152949350505050565b60006101208b83528060208401526127488184018c61242b565b6127518b612839565b8a6040850152896060850152838103608085015261276f818a61242b565b97151560a085015250505092151560c08401526001600160a01b039190911660e08301526101009091015295945050505050565b6000848252606060208301526127bc606083018561242b565b9050826040830152949350505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561280157600080fd5b604052919050565b60005b8381101561282457818101518382015260200161280c565b83811115612833576000848401525b50505050565b6005811061284357fe5b50565b6001600160a01b038116811461284357600080fdfea26469706673582212207e89c60cce5c6c0dfda813e024c2e97387292b43b9999daa23817bb6f44c376e64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ItemByHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemLifeByHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ItemsBySeller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"items\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedbacker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calculate\",\"type\":\"uint256\"}],\"name\":\"appealYes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"calculateToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerAllItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSellerItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSellerItemsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSingleItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sell","er\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"itemIsSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chioce\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeOrRestoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"calculate\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"returnToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"setLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"user_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BALANCES = "Balances";

    public static final String FUNC_ITEMBYHASH = "ItemByHash";

    public static final String FUNC_ITEMLIFEBYHASH = "ItemLifeByHash";

    public static final String FUNC_ITEMSBYSELLER = "ItemsBySeller";

    public static final String FUNC_USERLIST = "UserList";

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_APPEALYES = "appealYes";

    public static final String FUNC_CALCULATETOKEN = "calculateToken";

    public static final String FUNC_DECREASEBALANCE = "decreaseBalance";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETIDENTITY = "getIdentity";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSELLERALLITEMS = "getSellerAllItems";

    public static final String FUNC_GETSELLERITEM = "getSellerItem";

    public static final String FUNC_GETSELLERITEMSINDEX = "getSellerItemsIndex";

    public static final String FUNC_GETSINGLEITEM = "getSingleItem";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETWHOLELIFE = "getWholeLife";

    public static final String FUNC_INCREASEBALANCE = "increaseBalance";

    public static final String FUNC_ITEMISSOLD = "itemIsSold";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEORRESTOREITEM = "removeOrRestoreItem";

    public static final String FUNC_REPORT = "report";

    public static final String FUNC_RETURNTOKEN = "returnToken";

    public static final String FUNC_SETLOGIC = "setLogic";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final String FUNC_USER_COUNTER = "user_counter";

    protected ContractStorageService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger Balances(String param0) throws ContractException {
        final Function function = new Function(FUNC_BALANCES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple9<BigInteger, String, BigInteger, BigInteger, String, Boolean, Boolean, String, byte[]> ItemByHash(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_ITEMBYHASH,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<BigInteger, String, BigInteger, BigInteger, String, Boolean, Boolean, String, byte[]>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (Boolean) results.get(5).getValue(),
                (Boolean) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (byte[]) results.get(8).getValue());
    }

    public Tuple3<BigInteger, String, BigInteger> ItemLifeByHash(byte[] param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_ITEMLIFEBYHASH,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public Tuple9<BigInteger, String, BigInteger, BigInteger, String, Boolean, Boolean, String, byte[]> ItemsBySeller(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_ITEMSBYSELLER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<BigInteger, String, BigInteger, BigInteger, String, Boolean, Boolean, String, byte[]>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (Boolean) results.get(5).getValue(),
                (Boolean) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (byte[]) results.get(8).getValue());
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> UserList(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt addItem(ContractStorageService.Item items, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(ContractStorageService.Item items, BigInteger counter, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(ContractStorageService.Item items, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<ContractStorageService.Item, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<ContractStorageService.Item, BigInteger>(

                (ContractStorageService.Item) results.get(0),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt appealYes(String feedbacker, BigInteger calculate) {
        final Function function = new Function(
                FUNC_APPEALYES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] appealYes(String feedbacker, BigInteger calculate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPEALYES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAppealYes(String feedbacker, BigInteger calculate) {
        final Function function = new Function(
                FUNC_APPEALYES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getAppealYesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPEALYES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger calculateToken(String supplier, byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_CALCULATETOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt decreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] decreaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDecreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDecreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance(String user) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getIdentity(String user) throws ContractException {
        final Function function = new Function(FUNC_GETIDENTITY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.Item> getSellerAllItems(String seller) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERALLITEMS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public ContractStorageService.Item getSellerItem(String seller, BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public BigInteger getSellerItemsIndex(String owner) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEMSINDEX,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public ContractStorageService.Item getSingleItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSINGLEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.ItemLife> getWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt increaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] increaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIncreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getIncreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt itemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] itemIsSold(String seller, BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForItemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, Boolean> getItemIsSoldInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ITEMISSOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt registerAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(String userAddress, BigInteger chioce, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt removeOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeOrRestoreItem(BigInteger index, String owner, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, Boolean> getRemoveOrRestoreItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt report(String supplier, byte[] hash, BigInteger calculate) {
        final Function function = new Function(
                FUNC_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] report(String supplier, byte[] hash, BigInteger calculate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReport(String supplier, byte[] hash, BigInteger calculate) {
        final Function function = new Function(
                FUNC_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], BigInteger> getReportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], BigInteger>(

                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getReportOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REPORT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt returnToken(String supplier, byte[] hash) {
        final Function function = new Function(
                FUNC_RETURNTOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] returnToken(String supplier, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RETURNTOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReturnToken(String supplier, byte[] hash) {
        final Function function = new Function(
                FUNC_RETURNTOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, byte[]> getReturnTokenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RETURNTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(

                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getReturnTokenOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RETURNTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt setLogic(String logicAddress, String password) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setLogic(String logicAddress, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLogic(String logicAddress, String password) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetLogicInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLOGIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(String owner, BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt updateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(String owner, BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public BigInteger user_counter(String param0, byte[] param1) throws ContractException {
        final Function function = new Function(FUNC_USER_COUNTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public static ContractStorageService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractStorageService(contractAddress, client, credential);
    }

    public static ContractStorageService deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ContractStorageService.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Item extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger itemType;

        public BigInteger price;

        public String description;

        public Boolean isSold;

        public Boolean isRemoved;

        public String seller;

        public byte[] hash;

        public Item(Uint256 id, Utf8String name, Uint8 itemType, Uint256 price, Utf8String description, Bool isSold, Bool isRemoved, Address seller, Bytes32 hash) {
            super(id,name,itemType,price,description,isSold,isRemoved,seller,hash);
            this.id = id.getValue();
            this.name = name.getValue();
            this.itemType = itemType.getValue();
            this.price = price.getValue();
            this.description = description.getValue();
            this.isSold = isSold.getValue();
            this.isRemoved = isRemoved.getValue();
            this.seller = seller.getValue();
            this.hash = hash.getValue();
        }

        public Item(BigInteger id, String name, BigInteger itemType, BigInteger price, String description, Boolean isSold, Boolean isRemoved, String seller, byte[] hash) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(itemType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Bool(isSold),new org.fisco.bcos.sdk.abi.datatypes.Bool(isRemoved),new org.fisco.bcos.sdk.abi.datatypes.Address(seller),new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash));
            this.id = id;
            this.name = name;
            this.itemType = itemType;
            this.price = price;
            this.description = description;
            this.isSold = isSold;
            this.isRemoved = isRemoved;
            this.seller = seller;
            this.hash = hash;
        }
    }

    public static class ItemLife extends DynamicStruct {
        public BigInteger date;

        public String place;

        public BigInteger status;

        public ItemLife(Uint256 date, Utf8String place, Uint8 status) {
            super(date,place,status);
            this.date = date.getValue();
            this.place = place.getValue();
            this.status = status.getValue();
        }

        public ItemLife(BigInteger date, String place, BigInteger status) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status));
            this.date = date;
            this.place = place;
            this.status = status;
        }
    }
}