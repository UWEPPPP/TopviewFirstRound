package com.liujiahui.www.service.wrapper;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ContractStorageService extends Contract {
    public static final String[] BINARY_ARRAY = {"","","159052565b611f798161230c565b9052565b60008151808452815b81811015611fa257602081850181015186830182015201611f86565b81811115611fb35782602083870101525b50601f01601f19169290920160200192915050565b6000610120825184526020830151816020860152611fe882860182611f7d565b60408501519250611ffc6040870184611f70565b6060850151606087015260808501519250858103608087015261201f8184611f7d565b91505060a0840151915061203660a0860183611f6a565b60c0840151915061204a60c0860183611f6a565b60e0840151915061205e60e0860183611f5d565b61010093840151949093019390935250919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561211a57603f19898403018552815160608151855288820151818a8701526120f282870182611f7d565b8984015192506121018361230c565b95890191909152505093860193908601906001016120c4565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561217b57603f19888603018452612169858351611fc8565b9450928501929085019060010161214d565b5092979650505050505050565b60006060825261219b6060830186611f7d565b82810360208401526121ad8186611f7d565b91505060018060a01b0383166040830152949350505050565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b60208082526022908201527f4c6f67696320636f6e7472616374206164647265737320616c72656164792073604082015261195d60f21b606082015260800190565b600060208252611c596020830184611fc8565b90815260200190565b6000848252606060208301526122bf6060830185611f7d565b9050826040830152949350505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561230457600080fd5b604052919050565b6005811061231657fe5b50565b6001600160a01b038116811461231657600080fd5b801515811461231657600080fdfea2646970667358221220a8446211f6244874f83a57064dcf012035424317c290c17c94306caadca5385964736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50604051620024223803806200242283398101604081905261003191610056565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b600060208284031215610067578081fd5b81516001600160a01b038116811461007d578182fd5b9392505050565b61238e80620000946000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806376f453ff116100c3578063be5f9d9a1161007c578063be5f9d9a146102f6578063c265079d14610309578063cfd0353c1461032b578063d88ed0db1461033e578063fa46d0361461035e578063fc9a58a51461037e57610158565b806376f453ff1461028457806381ff5b15146102975780638a70fadb146102aa5780638ed46958146102bd578063b6b41fdc146102d0578063ba7dafab146102e357610158565b80633b04ba14116101155780633b04ba14146102035780633f1baf8414610216578063410e39f6146102295780636009b7cc1461023c578063652ddde91461025e5780636b266b341461027157610158565b8063036b4e411461015d57806305eb4f3c146101885780630e45682c1461019d57806311185c27146101bd5780631cfce6b4146101d057806332d03b5b146101f0575b600080fd5b61017061016b366004611e0d565b610391565b60405161017f9392919061219e565b60405180910390f35b61019b610196366004611d3b565b610526565b005b6101b06101ab366004611d11565b610603565b60405161017f91906122a0565b61019b6101cb366004611d11565b61082a565b6101e36101de366004611c5d565b610878565b60405161017f91906122b3565b6101b06101fe366004611e0d565b61092e565b61019b610211366004611d11565b610b33565b6101e3610224366004611c5d565b610b80565b61019b610237366004611d7c565b610bca565b61024f61024a366004611c5d565b610cd7565b60405161017f939291906122e5565b6101e361026c366004611c5d565b610cf8565b61019b61027f366004611e25565b610d0a565b61019b610292366004611c7f565b610f8f565b61019b6102a5366004611c5d565b6110b4565b6101e36102b8366004611c5d565b611127565b61019b6102cb366004611d11565b611174565b61019b6102de366004611cd1565b6112ba565b6101e36102f1366004611c5d565b6113b7565b61019b610304366004611dda565b611401565b61031c610317366004611e0d565b6114c9565b60405161017f939291906122bc565b6101e3610339366004611d11565b6115e6565b61035161034c366004611e0d565b611603565b60405161017f91906120c1565b61037161036c366004611c5d565b61176a565b60405161017f919061214b565b61019b61038c366004611f3f565b6119b3565b60015460609081906000906001600160a01b031633146103cd57604051636381e58960e11b81526004016103c4906121dc565b60405180910390fd5b60008481526005602081815260409283902091820154600180840180548651600261010094831615949094026000190190911692909204601f810185900485028301850190965285825293946004860193620100009093046001600160a01b0316928591908301828280156104835780601f1061045857610100808354040283529160200191610483565b820191906000526020600020905b81548152906001019060200180831161046657829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156105115780601f106104e657610100808354040283529160200191610511565b820191906000526020600020905b8154815290600101906020018083116104f457829003601f168201915b50505050509150935093509350509193909250565b6001546001600160a01b0316331461055157604051636381e58960e11b81526004016103c4906121dc565b6001600160a01b038316600090815260046020526040902080548291908490811061057857fe5b6000918252602080832060056007909302018201805494151560ff19909516949094179093556001600160a01b038616825260049092526040812080548493929190869081106105c457fe5b906000526020600020906007020160060154815260200190815260200160002060050160006101000a81548160ff021916908315150217905550505050565b61060b611ad7565b6001546001600160a01b0316331461063657604051636381e58960e11b81526004016103c4906121dc565b6001600160a01b038316600090815260046020526040902080548390811061065a57fe5b90600052602060002090600702016040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b5050509183525050600282015460209091019060ff16600481111561073857fe5b600481111561074357fe5b8152600382015460208083019190915260048301805460408051601f600260001961010060018716150201909416939093049283018590048502810185018252828152940193928301828280156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b5050509183525050600582015460ff80821615156020840152610100820416151560408301526201000090046001600160a01b0316606082015260069091015460809091015290505b92915050565b6001546001600160a01b0316331461085557604051636381e58960e11b81526004016103c4906121dc565b6001600160a01b0390911660009081526002602052604090208054919091039055565b6001546000906001600160a01b031633146108a657604051636381e58960e11b81526004016103c4906121dc565b600054604051636645f38760e11b81526001600160a01b039091169063cc8be70e906108d6908590600401612094565b60206040518083038186803b1580156108ee57600080fd5b505afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190611f27565b90505b919050565b610936611ad7565b6001546001600160a01b0316331461096157604051636381e58960e11b81526004016103c4906121dc565b600560008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b5050509183525050600282015460209091019060ff166004811115610a4457fe5b6004811115610a4f57fe5b8152600382015460208083019190915260048301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501825282815294019392830182828015610ae75780601f10610abc57610100808354040283529160200191610ae7565b820191906000526020600020905b815481529060010190602001808311610aca57829003601f168201915b5050509183525050600582015460ff80821615156020840152610100820416151560408301526201000090046001600160a01b0316606082015260069091015460809091015292915050565b6001546001600160a01b03163314610b5e57604051636381e58960e11b81526004016103c4906121dc565b6001600160a01b03909116600090815260026020526040902080549091019055565b6001546000906001600160a01b03163314610bae57604051636381e58960e11b81526004016103c4906121dc565b506001600160a01b031660009081526002602052604090205490565b6001546001600160a01b03163314610bf557604051636381e58960e11b81526004016103c4906121dc565b6001600160a01b0384166000908152600460205260408120805485908110610c1957fe5b9060005260206000209060070201905060066000826006015481526020019081526020016000206040518060600160405280428152602001858152602001846004811115610c6357fe5b6004811115610c6e57fe5b90528154600181810184556000938452602093849020835160039093020191825583830151805193949293610cab93928501929190910190611b23565b50604082015160028201805460ff19166001836004811115610cc957fe5b021790555050505050505050565b60036020526000908152604090208054600182015460029092015490919083565b60026020526000908152604090205481565b6001546001600160a01b03163314610d3557604051636381e58960e11b81526004016103c4906121dc565b60e08201516001600160a01b031660009081526004602090815260408220805460018181018355918452928290208551600790940201928355818501518051869493610d85938501920190611b23565b50604082015160028201805460ff19166001836004811115610da357fe5b02179055506060820151600382015560808201518051610dcd916004840191602090910190611b23565b5060a082015160058201805460c085015160e08087015160ff199093169415159490941761ff00191661010091151582021762010000600160b01b031916620100006001600160a01b039384160217909255930151600690920191909155600054908401516040516360e639f360e01b815291909216916360e639f391610e59919085906004016120a8565b600060405180830381600087803b158015610e7357600080fd5b505af1158015610e87573d6000803e3d6000fd5b5050505060e08201516001600160a01b0316600090815260076020908152604080832061010086018051855290835281842080548601905551835260058252909120835181558184015180518593610ee6926001850192910190611b23565b50604082015160028201805460ff19166001836004811115610f0457fe5b02179055506060820151600382015560808201518051610f2e916004840191602090910190611b23565b5060a082015160058201805460c085015160e086015160ff199092169315159390931761ff00191661010093151584021762010000600160b01b031916","","408601611bd5565b90509250925092565b6001600160a01b03169052565b15159052565b611f9881612328565b9052565b600081518084526020825b82811015611fc2578481018201518682018301528101611fa7565b82811115611fd257838284880101525b5080601f19601f8401168601019250505092915050565b600061012082518452602083015181602086015261200982860182611f9c565b6040850151925061201d6040870184611f8f565b606085015160608701526080850151925085810360808701526120408184611f9c565b91505060a0840151915061205760a0860183611f89565b60c0840151915061206b60c0860183611f89565b60e0840151915061207f60e0860183611f7c565b61010093840151949093019390935250919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561213e57603f19888603018452815160608151875287820151818989015261211482890182611f9c565b6040925061212483850151612322565b9290980191909152505092850192908501906001016120e6565b5092979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561213e57603f1988860301845261218c858351611fe9565b94509285019290850190600101612170565b6000606082526121b16060830186611f9c565b82810360208401526121c38186611f9c565b91505060018060a01b0383166040830152949350505050565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60208082526022908201527f4c6f67696320636f6e7472616374206164647265737320616c72656164792073604082015261195d60f21b606082015260800190565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b600060208252611c786020830184611fe9565b90815260200190565b6000848252606060208301526122d56060830185611f9c565b9050826040830152949350505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561231a57600080fd5b604052919050565b80610929815b6005811061233257fe5b50565b6001600160a01b038116811461233257600080fd5b801515811461233257600080fdfea2646970667358221220d3208400b8d974f909ce6436fba88c3c497f7f1a37dcb2dc7704e682432e989364736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"items\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedbacker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calculate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"appeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerAllItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSellerItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSellerItemsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSingleItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"itemIsSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"like_or_report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chioce\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeOrRestoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"}],\"name\":\"setLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"","outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"user_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BALANCES = "Balances";

    public static final String FUNC_USERLIST = "UserList";

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_APPEAL = "appeal";

    public static final String FUNC_DECREASEBALANCE = "decreaseBalance";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETIDENTITY = "getIdentity";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSELLERALLITEMS = "getSellerAllItems";

    public static final String FUNC_GETSELLERITEM = "getSellerItem";

    public static final String FUNC_GETSELLERITEMSINDEX = "getSellerItemsIndex";

    public static final String FUNC_GETSINGLEITEM = "getSingleItem";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETTOKEN = "getToken";

    public static final String FUNC_GETWHOLELIFE = "getWholeLife";

    public static final String FUNC_INCREASEBALANCE = "increaseBalance";

    public static final String FUNC_ITEMISSOLD = "itemIsSold";

    public static final String FUNC_LIKE_OR_REPORT = "like_or_report";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEORRESTOREITEM = "removeOrRestoreItem";

    public static final String FUNC_SETLOGIC = "setLogic";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final String FUNC_USER_COUNTER = "user_counter";

    protected ContractStorageService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger Balances(String param0) throws ContractException {
        final Function function = new Function(FUNC_BALANCES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> UserList(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt addItem(ContractStorageService.Item items, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(ContractStorageService.Item items, BigInteger counter, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(ContractStorageService.Item items, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<ContractStorageService.Item, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<ContractStorageService.Item, BigInteger>(

                (ContractStorageService.Item) results.get(0),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt appeal(String feedbacker, String supplier, BigInteger calculate, Boolean choice) {
        final Function function = new Function(
                FUNC_APPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] appeal(String feedbacker, String supplier, BigInteger calculate, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAppeal(String feedbacker, String supplier, BigInteger calculate, Boolean choice) {
        final Function function = new Function(
                FUNC_APPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, Boolean> getAppealInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPEAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (Boolean) results.get(3).getValue()
        );
    }

    public TransactionReceipt decreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] decreaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDecreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDecreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance(String user) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getIdentity(String user) throws ContractException {
        final Function function = new Function(FUNC_GETIDENTITY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.Item> getSellerAllItems(String seller) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERALLITEMS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public ContractStorageService.Item getSellerItem(String seller, BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public BigInteger getSellerItemsIndex(String owner) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEMSINDEX,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public ContractStorageService.Item getSingleItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSINGLEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public BigInteger getToken(String supplier) throws ContractException {
        final Function function = new Function(FUNC_GETTOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<ContractStorageService.ItemLife> getWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt increaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] increaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIncreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getIncreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt itemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] itemIsSold(String seller, BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForItemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, Boolean> getItemIsSoldInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ITEMISSOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt like_or_report(String supplier, Boolean choice, byte[] hash) {
        final Function function = new Function(
                FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] like_or_report(String supplier, Boolean choice, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLike_or_report(String supplier, Boolean choice, byte[] hash) {
        final Function function = new Function(
                FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, byte[]> getLike_or_reportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, byte[]>(

                (String) results.get(0).getValue(),
                (Boolean) results.get(1).getValue(),
                (byte[]) results.get(2).getValue()
        );
    }

    public TransactionReceipt registerAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(String userAddress, BigInteger chioce, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt removeOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeOrRestoreItem(BigInteger index, String owner, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, Boolean> getRemoveOrRestoreItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt setLogic(String logicAddress) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setLogic(String logicAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLogic(String logicAddress) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetLogicInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLOGIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt updateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(String owner, BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt updateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(String owner, BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public BigInteger user_counter(String param0, byte[] param1) throws ContractException {
        final Function function = new Function(FUNC_USER_COUNTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public static ContractStorageService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractStorageService(contractAddress, client, credential);
    }

    public static ContractStorageService deploy(Client client, CryptoKeyPair credential, String erc20Address) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(erc20Address)));
        return deploy(ContractStorageService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Item extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger itemType;

        public BigInteger price;

        public String description;

        public Boolean isSold;

        public Boolean isRemoved;

        public String seller;

        public byte[] hash;

        public Item(Uint256 id, Utf8String name, Uint8 itemType, Uint256 price, Utf8String description, Bool isSold, Bool isRemoved, Address seller, Bytes32 hash) {
            super(id,name,itemType,price,description,isSold,isRemoved,seller,hash);
            this.id = id.getValue();
            this.name = name.getValue();
            this.itemType = itemType.getValue();
            this.price = price.getValue();
            this.description = description.getValue();
            this.isSold = isSold.getValue();
            this.isRemoved = isRemoved.getValue();
            this.seller = seller.getValue();
            this.hash = hash.getValue();
        }

        public Item(BigInteger id, String name, BigInteger itemType, BigInteger price, String description, Boolean isSold, Boolean isRemoved, String seller, byte[] hash) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(itemType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Bool(isSold),new org.fisco.bcos.sdk.abi.datatypes.Bool(isRemoved),new org.fisco.bcos.sdk.abi.datatypes.Address(seller),new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash));
            this.id = id;
            this.name = name;
            this.itemType = itemType;
            this.price = price;
            this.description = description;
            this.isSold = isSold;
            this.isRemoved = isRemoved;
            this.seller = seller;
            this.hash = hash;
        }
    }

    public static class ItemLife extends DynamicStruct {
        public BigInteger date;

        public String place;

        public BigInteger status;

        public ItemLife(Uint256 date, Utf8String place, Uint8 status) {
            super(date,place,status);
            this.date = date.getValue();
            this.place = place.getValue();
            this.status = status.getValue();
        }

        public ItemLife(BigInteger date, String place, BigInteger status) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status));
            this.date = date;
            this.place = place;
            this.status = status;
        }
    }
}