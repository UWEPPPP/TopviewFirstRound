package com.liujiahui.www.service.wrapper;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class ContractStorageService extends Contract {
    public static final String[] BINARY_ARRAY = {"", "038516179055610f93565b6003546001600160a01b0316610f2857600154600380546001600160a01b0319166001600160a01b039092169190911790555b80604051602001610f399190612439565b6040516020818303038152906040528051906020012082604051602001610f609190612439565b6040516020818303038152906040528051906020012014610f935760405162461bcd60e51b81526004016103e190612622565b505050565b60015460009060609082906001600160a01b031615610ff0576001546001600160a01b0316331480610fd457506003546001600160a01b031633145b610ff05760405162461bcd60e51b81526004016103e190612600565b600084815260096020526040812080549190600019830183811061101057fe5b600091825260209091206003909102018054600282015491925090600183019060ff16600481111561103e57fe5b8154604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529184918301828280156110c45780601f10611099576101008083540402835291602001916110c4565b820191906000526020600020905b8154815290600101906020018083116110a757829003601f168201915b5050505050915094509450945050509193909250565b6001546001600160a01b03161561112a576001546001600160a01b031633148061110e57506003546001600160a01b031633145b61112a5760405162461bcd60e51b81526004016103e190612600565b6001600160a01b038316600090815260076020526040902080548291908490811061115157fe5b906000526020600020906007020160030181905550806008600060076000876001600160a01b03166001600160a01b03168152602001908152602001600020858154811061119b57fe5b906000526020600020906007020160060154815260200190815260200160002060030181905550505050565b6001546060906001600160a01b03161561121a576001546001600160a01b03163314806111fe57506003546001600160a01b031633145b61121a5760405162461bcd60e51b81526004016103e190612600565b600082815260096020908152604080832080548251818502810185019093528083529193909284015b82821015611348578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113095780601f106112de57610100808354040283529160200191611309565b820191906000526020600020905b8154815290600101906020018083116112ec57829003601f168201915b5050509183525050600282015460209091019060ff16600481111561132a57fe5b600481111561133557fe5b8152505081526020019060010190611243565b505050509050919050565b6001546001600160a01b0316156113a3576001546001600160a01b031633148061138757506003546001600160a01b031633145b6113a35760405162461bcd60e51b81526004016103e190612600565b6001600160a01b03821660009081526007602052604090208054829190859081106113ca57fe5b906000526020600020906007020160050160016101000a81548160ff021916908315150217905550505050565b6001546001600160a01b031615611447576001546001600160a01b031633148061142b57506003546001600160a01b031633145b6114475760405162461bcd60e51b81526004016103e190612600565b6001600160a01b038416600090815260076020526040812080548590811061146b57fe5b90600052602060002090600702019050600960008260060154815260200190815260200160002060405180606001604052804281526020018581526020018460048111156114b557fe5b60048111156114c057fe5b905281546001818101845560009384526020938490208351600390930201918255838301518051939492936114fd93928501929190910190611e4f565b50604082015160028201805460ff1916600183600481111561151b57fe5b021790555050505050505050565b60056020526000908152604090205481565b6001546001600160a01b03161561158b576001546001600160a01b031633148061156f57506003546001600160a01b031633145b61158b5760405162461bcd60e51b81526004016103e190612600565b6001600160a01b038216600090815260066020526040902054156115c15760405162461bcd60e51b81526004016103e1906125a8565b6001600160a01b03821660009081526005602090815260408083206103e89055600690915290206001908190558290821415611673576001600160a01b0380821660009081526006602052604080822060019081015590549051632210724360e11b8152911690634420e4869061163c908690600401612455565b600060405180830381600087803b15801561165657600080fd5b505af115801561166a573d6000803e3d6000fd5b50505050610f93565b6001600160a01b0316600090815260066020526040902060026001909101555050565b61169e611ecd565b6001546001600160a01b0316156116ee576001546001600160a01b03163314806116d257506003546001600160a01b031633145b6116ee5760405162461bcd60e51b81526004016103e190612600565b600860008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117b05780601f10611785576101008083540402835291602001916117b0565b820191906000526020600020905b81548152906001019060200180831161179357829003601f168201915b5050509183525050600282015460209091019060ff1660048111156117d157fe5b60048111156117dc57fe5b8152600382015460208083019190915260048301805460408051601f600260001961010060018716150201909416939093049283018590048502810185018252828152940193928301828280156118745780601f1061184957610100808354040283529160200191611874565b820191906000526020600020905b81548152906001019060200180831161185757829003601f168201915b5050509183525050600582015460ff80821615156020840152610100820416151560408301526201000090046001600160a01b0316606082015260069091015460809091015292915050565b600a60209081526000928352604080842090915290825290205481565b6001546060906001600160a01b031615611930576001546001600160a01b031633148061191457506003546001600160a01b031633145b6119305760405162461bcd60e51b81526004016103e190612600565b6001600160a01b038216600090815260076020908152604080832080548251818502810185019093528083529193909284015b8282101561134857838290600052602060002090600702016040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a2a5780601f106119ff57610100808354040283529160200191611a2a565b820191906000526020600020905b815481529060010190602001808311611a0d57829003601f168201915b5050509183525050600282015460209091019060ff166004811115611a4b57fe5b6004811115611a5657fe5b8152600382015460208083019190915260048301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501825282815294019392830182828015611aee5780601f10611ac357610100808354040283529160200191611aee565b820191906000526020600020905b815481529060010190602001808311611ad157829003601f168201915b5050509183525050600582015460ff8082161515602080850191909152610100830490911615156040840152620100009091046001600160a01b031660608301526006909201546080909101529082526001929092019101611963565b60015460609081906000906001600160a01b031615611ba3576001546001600160a01b0316331480611b8757506003546001600160a01b031633145b611ba35760405162461bcd60e51b81526004016103e190612600565b6000848152600860209081526040918290206005810154600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252929492936004860193620100009093046001600160a01b0316928591830182828015611c5b5780601f10611c3057610100808354040283529160200191611c5b565b820191906000526020600020905b815481529060010190602001808311611c3e57829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015611ce95780601f10611cbe57610100808354040283529160200191611ce9565b820191906000526020600020905b815481529060010190602001808311611ccc57829003601f168201915b50505050509150935093509350509193909250565b60066020526000908152604090208054600182015460029092015490919083565b6001546000906001600160a01b031615611d72576001546001600160a01b0316331480611d5657506003546001600160a01b031633145b611d725760405162461bcd60e51b81526004016103e190612600565b506001600160a01b031660009081526005602052604090205490565b6001546001600160a01b031615611dde576001546001600160a01b0316331480611dc257506003546001600160a01b031633145b611dde5760405162461bcd60e51b81526004016103e190612600565b6001600160a01b0390911660009081526005602052604090208054919091039055565b6001600160a01b038281166000908152600a60209081526040808320858452909152808220829055815490516310b3879160e11b81529216916321670f229161079891869190600401612469565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e9057805160ff1916838001178555611ebd565b82800160010185558215611ebd579182015b82811115611ebd578251825591602001919060010190611ea2565b50611ec9929150611f19565b5090565b6040805161012081018252600080825260606020830152909182019081", "5260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b611f3391905b80821115611ec95760008155600101611f1f565b90565b80356001600160a01b0381168114610c9657600080fd5b80358015158114610c9657600080fd5b803560058110610c9657600080fd5b600082601f830112611f7c578081fd5b813567ffffffffffffffff811115611f92578182fd5b611fa5601f8201601f191660200161269f565b9150808252836020828501011115611fbc57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611fe6578081fd5b611ff08383611f36565b9392505050565b6000806000806080858703121561200c578283fd5b8435612017816126ff565b93506020850135612027816126ff565b925060408501359150606085013561203e81612714565b939692955090935050565b60008060006060848603121561205d578283fd5b8335612068816126ff565b9250602084013561207881612714565b929592945050506040919091013590565b6000806040838503121561209b578182fd5b6120a58484611f36565b946020939093013593505050565b600080604083850312156120c5578182fd5b82356120d0816126ff565b9150602083013567ffffffffffffffff8111156120eb578182fd5b6120f785828601611f6c565b9150509250929050565b600080600060608486031215612115578283fd5b8335612120816126ff565b925060208401359150604084013561213781612714565b809150509250925092565b60008060008060808587031215612157578384fd5b6121618686611f36565b935060208501359250604085013567ffffffffffffffff811115612183578283fd5b61218f87828801611f6c565b949793965093946060013593505050565b6000806000606084860312156121b4578283fd5b6121be8585611f36565b95602085013595506040909401359392505050565b6000602082840312156121e4578081fd5b5035919050565b600080604083850312156121fd578182fd5b823567ffffffffffffffff80821115612214578384fd5b610120918501808703831315612228578485fd5b6122318361269f565b813581526020820135935082841115612248578586fd5b61225488858401611f6c565b60208201526122668860408401611f5d565b6040820152606082013560608201526080820135935082841115612288578586fd5b61229488858401611f6c565b60808201526122a68860a08401611f4d565b60a08201526122b88860c08401611f4d565b60c08201526122ca8860e08401611f36565b60e082015261010091820135918101919091529660209590950135955050505050565b6000602082840312156122fe578081fd5b5051919050565b600080600060608486031215612319578081fd5b8335925061232a8560208601611f36565b91506123398560408601611f4d565b90509250925092565b6001600160a01b03169052565b15159052565b61235e816126f2565b9052565b6000815180845261237a8160208601602086016126c6565b601f01601f19169290920160200192915050565b60006101208251845260208301518160208601526123ae82860182612362565b604085015192506123c26040870184612355565b606085015160608701526080850151925085810360808701526123e58184612362565b91505060a084015191506123fc60a086018361234f565b60c0840151915061241060c086018361234f565b60e0840151915061242460e0860183612342565b61010093840151949093019390935250919050565b6000825161244b8184602087016126c6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156124fc57603f19898403018552815160608151855288820151818a8701526124d482870182612362565b8984015192506124e3836126f2565b95890191909152505093860193908601906001016124a6565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561255d57603f1988860301845261254b85835161238e565b9450928501929085019060010161252f565b5092979650505050505050565b60006060825261257d6060830186612362565b828103602084015261258f8186612362565b91505060018060a01b0383166040830152949350505050565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b602080825260079082015266125b9d985b1a5960ca1b604082015260600190565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b600060208252611ff0602083018461238e565b90815260200190565b6000848252606060208301526126796060830185612362565b9050826040830152949350505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156126be57600080fd5b604052919050565b60005b838110156126e15781810151838201526020016126c9565b838111156104b45750506000910152565b600581106126fc57fe5b50565b6001600160a01b03811681146126fc57600080fd5b80151581146126fc57600080fdfea26469706673582212201c7b917019890411c4d9c2eecc04b00ae284970fb80cf8e445107cec864a954f64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"", "93610efa93908501920190611eb0565b50604082015160028201805460ff19166001836004811115610f1857fe5b02179055506060820151600382015560808201518051610f42916004840191602090910190611eb0565b5060a082015160058201805460c085015160e08087015160ff199093169415159490941761ff00191661010091151582021762010000600160b01b031916620100006001600160a01b039384160217909255938101516006909301929092558401519091166000908152600a60209081526040808320938601805184529382528083208054860190559251825260088152919020835181558184015180518593610ff3926001850192910190611eb0565b50604082015160028201805460ff1916600183600481111561101157fe5b0217905550606082015160038201556080820151805161103b916004840191602090910190611eb0565b5060a082015160058201805460c085015160e08087015160ff199093169415159490941761ff00191661010091151582021762010000600160b01b031916620100006001600160a01b039384160217909255930151600690920191909155600054908401516040516360e639f360e01b815291909216916360e639f3916110c79190859060040161247e565b600060405180830381600087803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03161561114e576001546001600160a01b031633148061113157506003546001600160a01b031633145b61114e57604051636381e58960e11b81526004016103ea906125bd565b6001600160a01b03841660009081526005602052604090208054839003905580156111dc576000546040516303cfac4960e31b81526001600160a01b0390911690631e7d6248906111a5908690869060040161247e565b600060405180830381600087803b1580156111bf57600080fd5b505af11580156111d3573d6000803e3d6000fd5b50505050611241565b6000546040516360e639f360e01b81526001600160a01b03909116906360e639f39061120e908690869060040161247e565b600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b505050505b50505050565b6001546000906001600160a01b03161561129b576001546001600160a01b031633148061127e57506003546001600160a01b031633145b61129b57604051636381e58960e11b81526004016103ea906125bd565b506001600160a01b031660009081526006602052604090206001015490565b6001546001600160a01b03161561130b576001546001600160a01b03163314806112ee57506003546001600160a01b031633145b61130b57604051636381e58960e11b81526004016103ea906125bd565b6001600160a01b0382166000908152600660205260409020541561134257604051636381e58960e11b81526004016103ea90612601565b6001600160a01b03821660009081526005602090815260408083206103e890556006909152902060019081905582908214156113f4576001600160a01b03808216600090815260066020526040808220600190810155905490516394ed4dfd60e01b81529116906394ed4dfd906113bd90869060040161246a565b600060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b50505050611415565b6001600160a01b038116600090815260066020526040902060026001909101555b505050565b6001546001600160a01b03161561146b576001546001600160a01b031633148061144e57506003546001600160a01b031633145b61146b57604051636381e58960e11b81526004016103ea906125bd565b6001600160a01b0383166000908152600a60208181526040808420858552909152909120540461149b8483611e16565b82156114d3576000546040516303cfac4960e31b81526001600160a01b0390911690631e7d6248906111a5908790859060040161247e565b6001600160a01b0384166000908152600a6020908152604080832085845290915290208054829003905550505050565b6001546000906001600160a01b031615611557576001546001600160a01b031633148061153a57506003546001600160a01b031633145b61155757604051636381e58960e11b81526004016103ea906125bd565b506001600160a01b031660009081526007602052604090205490565b6001546001600160a01b0316156115c4576001546001600160a01b03163314806115a757506003546001600160a01b031633145b6115c457604051636381e58960e11b81526004016103ea906125bd565b6001600160a01b03831660009081526007602052604090208054829190849081106115eb57fe5b906000526020600020906007020160030181905550806008600060076000876001600160a01b03166001600160a01b03168152602001908152602001600020858154811061163557fe5b906000526020600020906007020160060154815260200190815260200160002060030181905550505050565b60015460009060609082906001600160a01b0316156116ba576001546001600160a01b031633148061169d57506003546001600160a01b031633145b6116ba57604051636381e58960e11b81526004016103ea906125bd565b60008481526009602052604081208054919060001983018381106116da57fe5b600091825260209091206003909102018054600282015491925090600183019060ff16600481111561170857fe5b8154604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815291849183018282801561178e5780601f106117635761010080835404028352916020019161178e565b820191906000526020600020905b81548152906001019060200180831161177157829003601f168201915b5050505050915094509450945050509193909250565b6001600160a01b0382166117cb57604051636381e58960e11b81526004016103ea90612638565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156118575780601f1061182c57610100808354040283529160200191611857565b820191906000526020600020905b81548152906001019060200180831161183a57829003601f168201915b50506001549394505050506001600160a01b0316158061188057506003546001600160a01b0316155b156118b9578151611898906004906020850190611eb0565b50600180546001600160a01b0319166001600160a01b038516179055611415565b6003546001600160a01b03166118ec57600154600380546001600160a01b0319166001600160a01b039092169190911790555b806040516020016118fd919061244e565b6040516020818303038152906040528051906020012082604051602001611924919061244e565b604051602081830303815290604052805190602001201461141557604051636381e58960e11b81526004016103ea906125df565b600a60209081526000928352604080842090915290825290205481565b6001546060906001600160a01b0316156119c9576001546001600160a01b03163314806119ac57506003546001600160a01b031633145b6119c957604051636381e58960e11b81526004016103ea906125bd565b600082815260096020908152604080832080548251818502810185019093528083529193909284015b82821015611af7578382906000526020600020906003020160405180606001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ab85780601f10611a8d57610100808354040283529160200191611ab8565b820191906000526020600020905b815481529060010190602001808311611a9b57829003601f168201915b5050509183525050600282015460209091019060ff166004811115611ad957fe5b6004811115611ae457fe5b81525050815260200190600101906119f2565b505050509050919050565b6001546060906001600160a01b031615611b56576001546001600160a01b0316331480611b3957506003546001600160a01b031633145b611b5657604051636381e58960e11b81526004016103ea906125bd565b6001600160a01b038216600090815260076020908152604080832080548251818502810185019093528083529193909284015b82821015611af757838290600052602060002090600702016040518061012001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c505780601f10611c2557610100808354040283529160200191611c50565b820191906000526020600020905b815481529060010190602001808311611c3357829003601f168201915b5050509183525050600282015460209091019060ff166004811115611c7157fe5b6004811115611c7c57fe5b8152600382015460208083019190915260048301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501825282815294019392830182828015611d145780601f10611ce957610100808354040283529160200191611d14565b820191906000526020600020905b815481529060010190602001808311611cf757829003601f168201915b5050509183525050600582015460ff8082161515602080850191909152610100830490911615156040840152620100009091046001600160a01b031660608301526006909201546080909101529082526001929092019101611b89565b6001546001600160a01b031615611dc2576001546001600160a01b0316331480611da557506003546001600160a01b031633145b611dc257604051636381e58960e11b81526004016103ea906125bd565b6001600160a01b0382166000908152600760205260409020805482919085908110611de957fe5b906000526020600020906007020160050160016101000a81548160ff021916908315150217905550505050565b6001600160a01b038281166000908152600a60209081526040808320858452909152808220829055815490516303cfac4960e31b8152921691631e7d6248916110c79186919060040161247e565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ef157805160ff191683800117", "8555611f1e565b82800160010185558215611f1e579182015b82811115611f1e578251825591602001919060010190611f03565b50611f2a929150611f2e565b5090565b611f4891905b80821115611f2a5760008155600101611f34565b90565b80356001600160a01b038116811461089557600080fd5b8035801515811461089557600080fd5b80356005811061089557600080fd5b600082601f830112611f91578081fd5b813567ffffffffffffffff811115611fa7578182fd5b611fba601f8201601f19166020016126b4565b9150808252836020828501011115611fd157600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611ffb578081fd5b6120058383611f4b565b9392505050565b60008060008060808587031215612021578283fd5b843561202c81612714565b9350602085013561203c81612714565b925060408501359150606085013561205381612729565b939692955090935050565b600080600060608486031215612072578283fd5b833561207d81612714565b9250602084013561208d81612729565b929592945050506040919091013590565b600080604083850312156120b0578182fd5b6120ba8484611f4b565b946020939093013593505050565b600080604083850312156120da578182fd5b82356120e581612714565b9150602083013567ffffffffffffffff811115612100578182fd5b61210c85828601611f81565b9150509250929050565b60008060006060848603121561212a578283fd5b833561213581612714565b925060208401359150604084013561214c81612729565b809150509250925092565b6000806000806080858703121561216c578384fd5b6121768686611f4b565b935060208501359250604085013567ffffffffffffffff811115612198578283fd5b6121a487828801611f81565b949793965093946060013593505050565b6000806000606084860312156121c9578283fd5b6121d38585611f4b565b95602085013595506040909401359392505050565b6000602082840312156121f9578081fd5b5035919050565b60008060408385031215612212578182fd5b823567ffffffffffffffff80821115612229578384fd5b61012091850180870383131561223d578485fd5b612246836126b4565b81358152602082013593508284111561225d578586fd5b61226988858401611f81565b602082015261227b8860408401611f72565b604082015260608201356060820152608082013593508284111561229d578586fd5b6122a988858401611f81565b60808201526122bb8860a08401611f62565b60a08201526122cd8860c08401611f62565b60c08201526122df8860e08401611f4b565b60e082015261010091820135918101919091529660209590950135955050505050565b600060208284031215612313578081fd5b5051919050565b60008060006060848603121561232e578081fd5b8335925061233f8560208601611f4b565b915061234e8560408601611f62565b90509250925092565b6001600160a01b03169052565b15159052565b61237381612707565b9052565b6000815180845261238f8160208601602086016126db565b601f01601f19169290920160200192915050565b60006101208251845260208301518160208601526123c382860182612377565b604085015192506123d7604087018461236a565b606085015160608701526080850151925085810360808701526123fa8184612377565b91505060a0840151915061241160a0860183612364565b60c0840151915061242560c0860183612364565b60e0840151915061243960e0860183612357565b61010093840151949093019390935250919050565b600082516124608184602087016126db565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561251157603f19898403018552815160608151855288820151818a8701526124e982870182612377565b8984015192506124f883612707565b95890191909152505093860193908601906001016124bb565b509098975050505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561257257603f198886030184526125608583516123a3565b94509285019290850190600101612544565b5092979650505050505050565b6000606082526125926060830186612377565b82810360208401526125a48186612377565b91505060018060a01b0383166040830152949350505050565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b60208082526018908201527f4163636f756e7420616c72656164792072656769737465720000000000000000604082015260600190565b602080825260079082015266125b9d985b1a5960ca1b604082015260600190565b60006020825261200560208301846123a3565b90815260200190565b60008482526060602083015261268e6060830185612377565b9050826040830152949350505050565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156126d357600080fd5b604052919050565b60005b838110156126f65781810151838201526020016126de565b838111156112415750506000910152565b6005811061271157fe5b50565b6001600160a01b038116811461271157600080fd5b801515811461271157600080fdfea26469706673582212201ac871057cd9139c61d1918e28609427668a93e02b7b036219a362395636322d64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"items\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedbacker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calculate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"appeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerAllItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSellerItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSellerItemsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSingleItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"itemIsSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"like_or_report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chioce\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeOrRestoreItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"setLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\"", ",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"user_counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BALANCES = "Balances";

    public static final String FUNC_USERLIST = "UserList";

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_APPEAL = "appeal";

    public static final String FUNC_DECREASEBALANCE = "decreaseBalance";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETIDENTITY = "getIdentity";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSELLERALLITEMS = "getSellerAllItems";

    public static final String FUNC_GETSELLERITEM = "getSellerItem";

    public static final String FUNC_GETSELLERITEMSINDEX = "getSellerItemsIndex";

    public static final String FUNC_GETSINGLEITEM = "getSingleItem";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETTOKEN = "getToken";

    public static final String FUNC_GETWHOLELIFE = "getWholeLife";

    public static final String FUNC_INCREASEBALANCE = "increaseBalance";

    public static final String FUNC_ITEMISSOLD = "itemIsSold";

    public static final String FUNC_LIKE_OR_REPORT = "like_or_report";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEORRESTOREITEM = "removeOrRestoreItem";

    public static final String FUNC_SETLOGIC = "setLogic";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final String FUNC_USER_COUNTER = "user_counter";

    protected ContractStorageService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static ContractStorageService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractStorageService(contractAddress, client, credential);
    }

    public static ContractStorageService deploy(Client client, CryptoKeyPair credential, String erc20Address) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(erc20Address)));
        return deploy(ContractStorageService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public BigInteger Balances(String param0) throws ContractException {
        final Function function = new Function(FUNC_BALANCES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> UserList(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERLIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt addItem(ContractStorageService.Item items, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(ContractStorageService.Item items, BigInteger counter, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(ContractStorageService.Item items, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(items,
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<ContractStorageService.Item, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<ContractStorageService.Item, BigInteger>(

                (ContractStorageService.Item) results.get(0),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt appeal(String feedbacker, String supplier, BigInteger calculate, Boolean choice) {
        final Function function = new Function(
                FUNC_APPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] appeal(String feedbacker, String supplier, BigInteger calculate, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAppeal(String feedbacker, String supplier, BigInteger calculate, Boolean choice) {
        final Function function = new Function(
                FUNC_APPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(calculate),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, Boolean> getAppealInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPEAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (Boolean) results.get(3).getValue()
        );
    }

    public TransactionReceipt decreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] decreaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDecreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDecreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DECREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public BigInteger getBalance(String user) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getIdentity(String user) throws ContractException {
        final Function function = new Function(FUNC_GETIDENTITY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Address>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractStorageService.Item> getSellerAllItems(String seller) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERALLITEMS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public ContractStorageService.Item getSellerItem(String seller, BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {
                }));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public BigInteger getSellerItemsIndex(String owner) throws ContractException {
        final Function function = new Function(FUNC_GETSELLERITEMSINDEX,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public ContractStorageService.Item getSingleItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSINGLEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {
                }));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public BigInteger getToken(String supplier) throws ContractException {
        final Function function = new Function(FUNC_GETTOKEN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<ContractStorageService.ItemLife> getWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt increaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] increaseBalance(String user, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIncreaseBalance(String user, BigInteger amount) {
        final Function function = new Function(
                FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(user),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getIncreaseBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INCREASEBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt itemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] itemIsSold(String seller, BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForItemIsSold(String seller, BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_ITEMISSOLD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, Boolean> getItemIsSoldInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ITEMISSOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt like_or_report(String supplier, Boolean choice, byte[] hash) {
        final Function function = new Function(
                FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] like_or_report(String supplier, Boolean choice, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLike_or_report(String supplier, Boolean choice, byte[] hash) {
        final Function function = new Function(
                FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, byte[]> getLike_or_reportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LIKE_OR_REPORT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Bool>() {
                }, new TypeReference<Bytes32>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, byte[]>(

                (String) results.get(0).getValue(),
                (Boolean) results.get(1).getValue(),
                (byte[]) results.get(2).getValue()
        );
    }

    public TransactionReceipt registerAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(String userAddress, BigInteger chioce, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String userAddress, BigInteger chioce) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(chioce)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt removeOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeOrRestoreItem(BigInteger index, String owner, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOrRestoreItem(BigInteger index, String owner, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, Boolean> getRemoveOrRestoreItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEORRESTOREITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt setLogic(String logicAddress, String password) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setLogic(String logicAddress, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLogic(String logicAddress, String password) {
        final Function function = new Function(
                FUNC_SETLOGIC,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(logicAddress),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetLogicInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLOGIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Utf8String>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(String owner, BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(String owner, BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt updateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(String owner, BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(String owner, BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public BigInteger user_counter(String param0, byte[] param1) throws ContractException {
        final Function function = new Function(FUNC_USER_COUNTER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public static class Item extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger itemType;

        public BigInteger price;

        public String description;

        public Boolean isSold;

        public Boolean isRemoved;

        public String seller;

        public byte[] hash;

        public Item(Uint256 id, Utf8String name, Uint8 itemType, Uint256 price, Utf8String description, Bool isSold, Bool isRemoved, Address seller, Bytes32 hash) {
            super(id, name, itemType, price, description, isSold, isRemoved, seller, hash);
            this.id = id.getValue();
            this.name = name.getValue();
            this.itemType = itemType.getValue();
            this.price = price.getValue();
            this.description = description.getValue();
            this.isSold = isSold.getValue();
            this.isRemoved = isRemoved.getValue();
            this.seller = seller.getValue();
            this.hash = hash.getValue();
        }

        public Item(BigInteger id, String name, BigInteger itemType, BigInteger price, String description, Boolean isSold, Boolean isRemoved, String seller, byte[] hash) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(itemType), new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price), new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description), new org.fisco.bcos.sdk.abi.datatypes.Bool(isSold), new org.fisco.bcos.sdk.abi.datatypes.Bool(isRemoved), new org.fisco.bcos.sdk.abi.datatypes.Address(seller), new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash));
            this.id = id;
            this.name = name;
            this.itemType = itemType;
            this.price = price;
            this.description = description;
            this.isSold = isSold;
            this.isRemoved = isRemoved;
            this.seller = seller;
            this.hash = hash;
        }
    }

    public static class ItemLife extends DynamicStruct {
        public BigInteger date;

        public String place;

        public BigInteger status;

        public ItemLife(Uint256 date, Utf8String place, Uint8 status) {
            super(date, place, status);
            this.date = date.getValue();
            this.place = place.getValue();
            this.status = status.getValue();
        }

        public ItemLife(BigInteger date, String place, BigInteger status) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place), new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status));
            this.date = date;
            this.place = place;
            this.status = status;
        }
    }
}