package com.liujiahui.www.service.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ContractMarketService extends Contract {
    public static final String[] BINARY_ARRAY = {"","612148565b9199909850909650945050505050565b60048054604051636104917d60e11b81526001600160a01b039091169163c20922fa91610d2d91339101612345565b60206040518083038186803b158015610d4557600080fd5b505afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190612101565b600214610d9c5760405162461bcd60e51b81526004016103759061265d565b610da4611b8e565b600054604051633028ad6b60e21b81526001600160a01b039091169063c0a2b5ac90610dd4908690600401612551565b60006040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2891908101906120c6565b600080546040516302ef145760e51b815292935090916001600160a01b0390911690635de28ae090610e5e908790600401612551565b60006040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eb29190810190612148565b505090508160a00151610ed75760405162461bcd60e51b81526004016103759061262f565b8062093a80014210610efb5760405162461bcd60e51b8152600401610375906125e4565b6000546060830151604051635b86f59960e01b81526001600160a01b0390921691635b86f59991610f3191339190600401612359565b600060405180830381600087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b505060005460e08501516060860151604051600162fa96b760e01b031981526001600160a01b03909316945063ff0569499350610f9e92600401612359565b600060405180830381600087803b158015610fb857600080fd5b505af1158015610fcc573d6000803e3d6000fd5b50506000805460e08601516040516319936f0d60e01b81526001600160a01b0390921694506319936f0d9350610a409290918891906004016123da565b60048054604051636104917d60e11b81526060926001600160a01b039092169163c20922fa9161103b91339101612345565b60206040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108b9190612101565b6002146110aa5760405162461bcd60e51b81526004016103759061265d565b600054604051637c44c8a560e01b81526001600160a01b0390911690637c44c8a5906110da908590600401612551565b60006040518083038186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261112e9190810190611e32565b92915050565b60048054604051636104917d60e11b81526001600160a01b039091169163c20922fa9161116391339101612345565b60206040518083038186803b15801561117b57600080fd5b505afa15801561118f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b39190612101565b6001146111d25760405162461bcd60e51b81526004016103759061268d565b60005460405163478baa5d60e11b81526001600160a01b0390911690638f1754ba9061120690859033908690600401612734565b600060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050505050565b60048054604051636104917d60e11b815260009283926001600160a01b03169163c20922fa9161126e91339101612345565b60206040518083038186803b15801561128657600080fd5b505afa15801561129a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112be9190612101565b6001146112dd5760405162461bcd60e51b81526004016103759061268d565b60008054604051630d33aef760e01b81526001600160a01b0390911690630d33aef79061130e903390600401612345565b60206040518083038186803b15801561132657600080fd5b505afa15801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e9190612101565b90506000818989893360405160200161137b9594939291906122e3565b60405160208183030381529060405280519060200120905061139b611b8e565b6040518061012001604052808481526020018b81526020018860048111156113bf57fe5b60048111156113ca57fe5b8152602081018b905260408082018b9052600060608301819052608083018190523360a084015260c0909201859052905490516312ddb0b960e01b81529192506001600160a01b0316906312ddb0b99061142a9084908a90600401612721565b600060405180830381600087803b15801561144457600080fd5b505af1158015611458573d6000803e3d6000fd5b505060055460e0840151604051633a1d9a2960e11b81526001600160a01b03909216935063743b34529250611491918a90600401612359565b600060405180830381600087803b1580156114ab57600080fd5b505af11580156114bf573d6000803e3d6000fd5b50505050336001600160a01b03167f2db22df1631edf2d77f9b36c2a4277805c00cc152fddb472fd9d0d23c9dd39508b8b6040516114fe929190612598565b60405180910390a250909890975095505050505050565b60048054604051636104917d60e11b81526001600160a01b039091169163c20922fa9161154491339101612345565b60206040518083038186803b15801561155c57600080fd5b505afa158015611570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115949190612101565b6001146115b35760405162461bcd60e51b81526004016103759061268d565b60005460405163781c1f1d60e01b81526001600160a01b039091169063781c1f1d9061120690339086908690600401612395565b6000806000600160149054906101000a900460ff16156116195760405162461bcd60e51b8152600401610375906126bd565b6001805460ff60a01b1916600160a01b17905560048054604051636104917d60e11b81526001600160a01b039091169163c20922fa9161165b91339101612345565b60206040518083038186803b15801561167357600080fd5b505afa158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab9190612101565b6002146116ca5760405162461bcd60e51b81526004016103759061265d565b6116d2611b8e565b6000546040516337b9beeb60e01b81526001600160a01b03909116906337b9beeb906117049089908990600401612359565b60006040518083038186803b15801561171c57600080fd5b505afa158015611730573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261175891908101906120c6565b90508060a001511561177c5760405162461bcd60e51b815260040161037590612609565b611784610403565b816060015111156117a75760405162461bcd60e51b8152600401610375906125ba565b6000546040516319936f0d60e01b81526001600160a01b03909116906319936f0d906117dc90899089906001906004016123da565b600060405180830381600087803b1580156117f657600080fd5b505af115801561180a573d6000803e3d6000fd5b50506000546060840151604051600162fa96b760e01b031981526001600160a01b03909216935063ff056949925061184791339190600401612359565b600060405180830381600087803b15801561186157600080fd5b505af1158015611875573d6000803e3d6000fd5b50506000546060840151604051635b86f59960e01b81526001600160a01b039092169350635b86f59992506118af918a9190600401612359565b600060405180830381600087803b1580156118c957600080fd5b505af11580156118dd573d6000803e3d6000fd5b50506000805460405163a6d3724160e01b81526001600160a01b03909116935063a6d372419250611915918a918a9190600401612435565b600060405180830381600087803b15801561192f57600080fd5b505af1158015611943573d6000803e3d6000fd5b50505050856001600160a01b03167fb85097e0a99c7adb5b4581fb7c049733522cbccc6a256ff60d83fcb9b94b365533836101000151604051611987929190612359565b60405180910390a261010001516001805460ff60a01b1916905594953395945092505050565b6119b5611b8e565b600054604051633028ad6b60e21b81526001600160a01b039091169063c0a2b5ac906119e5908590600401612551565b60006040518083038186803b1580156119fd57600080fd5b505afa158015611a11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261112e91908101906120c6565b60048054604051636104917d60e11b815260609283926000926001600160a01b039091169163c20922fa91611a7091339101612345565b60206040518083038186803b158015611a8857600080fd5b505afa158015611a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac09190612101565b600214611adf5760405162461bcd60e51b81526004016103759061265d565b60005460405163d650d12360e01b81526001600160a01b039091169063d650d12390611b0f908790600401612551565b60006040518083038186803b158015611b2757600080fd5b505afa158015611b3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b639190810190611fd5565b9250925092509193909250565b6001546001600160a01b031681565b6002546001600160a01b031681565b60408051610120810182526000808252606060208301529091820190815260006020820181905260606040830181905282018190526080820181905260a0820181905260c09091015290565b805161112e81612834565b805161112e81612849565b805161112e81612857565b600082601f830112611c0b578081fd5b8135611c1e611c19826127d3565b61278c565b9150808252836020828501011115611c3557600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611c5e578081fd5b8151611c6c611c19826127d3565b9150808252836020828501011115611c8357600080fd5b611c948160208401602086016127f7565b5092915050565b6000610120808385031215611cae578182fd5b611cb78161278c565b91505081518152602082015167ffffffffffffffff80821115611cd957600080fd5b611ce585838601611c4e565b60208401","52611cf78560408601611bf0565b6040840152606084015160608401526080840151915080821115611d1a57600080fd5b50611d2784828501611c4e565b608083015250611d3a8360a08401611be5565b60a0820152611d4c8360c08401611be5565b60c0820152611d5e8360e08401611bda565b60e082015261010080830151818301525092915050565b60008060008060808587031215611d8a578384fd5b8435611d9581612834565b93506020850135611da581612834565b9250604085013591506060850135611dbc81612849565b939692955090935050565b600080600060608486031215611ddb578283fd5b8335611de681612834565b92506020840135611df681612849565b929592945050506040919091013590565b60008060408385031215611e19578182fd5b8235611e2481612834565b946020939093013593505050565b60006020808385031215611e44578182fd5b825167ffffffffffffffff80821115611e5b578384fd5b81850186601f820112611e6c578485fd5b80519250611e7c611c19846127b3565b83815284810190828601875b86811015611f015781518501606080601f19838f03011215611ea8578a8bfd5b611eb18161278c565b8a8301518152604083015189811115611ec8578c8dfd5b611ed68f8d83870101611c4e565b8c8301525081830151611ee881612857565b6040820152865250509287019290870190600101611e88565b50909998505050505050505050565b60006020808385031215611f22578182fd5b825167ffffffffffffffff811115611f38578283fd5b80840185601f820112611f49578384fd5b80519150611f59611c19836127b3565b82815283810190828501865b85811015611f8e57611f7c8a888451880101611c9b565b84529286019290860190600101611f65565b509098975050505050505050565b600060208284031215611fad578081fd5b5035919050565b60008060408385031215611fc6578182fd5b50508035926020909101359150565b600080600060608486031215611fe9578081fd5b835167ffffffffffffffff80821115612000578283fd5b61200c87838801611c4e565b94506020860151915080821115612021578283fd5b5061202e86828701611c4e565b925050604084015161203f81612834565b809150509250925092565b600080600080600060a08688031215612061578283fd5b853567ffffffffffffffff80821115612078578485fd5b61208489838a01611bfb565b96506020880135955060408801359150808211156120a0578485fd5b506120ad88828901611bfb565b9598949750949560608101359550608001359392505050565b6000602082840312156120d7578081fd5b815167ffffffffffffffff8111156120ed578182fd5b6120f984828501611c9b565b949350505050565b600060208284031215612112578081fd5b5051919050565b6000806040838503121561212b578182fd5b82359150602083013561213d81612849565b809150509250929050565b60008060006060848603121561215c578081fd5b83519250602084015167ffffffffffffffff811115612179578182fd5b61218586828701611c4e565b925050604084015190509250925092565b600080600080608085870312156121ab578182fd5b84359350602085013567ffffffffffffffff8111156121c8578283fd5b6121d487828801611bfb565b935050604085013591506060850135611dbc81612834565b6001600160a01b03169052565b15159052565b61220881612827565b9052565b600081518084526122248160208601602086016127f7565b601f01601f19169290920160200192915050565b60006101208251845260208301518160208601526122588286018261220c565b6040850151925061226c60408701846121ff565b6060850151606087015260808501519250858103608087015261228f818461220c565b91505060a084015191506122a660a08601836121f9565b60c084015191506122ba60c08601836121f9565b60e084015191506122ce60e08601836121ec565b61010093840151949093019390935250919050565b600086825285516122fb816020850160208a016127f7565b808301866020820152855191506123198260408301602089016127f7565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b600060018060a01b038616825284602083015260806040830152612424608083018561220c565b905082606083015295945050505050565b6001600160a01b03939093168352602083019190915260806040830181905260099083015268707265706172696e6760b81b60a0830152606082015260c00190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015611f8e57603f19898403018552815160608151855288820151818a8701526124c98287018261220c565b8984015192506124d883612827565b958901919091525050938601939086019060010161249b565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561254457603f19888603018452612532858351612238565b94509285019290850190600101612516565b5092979650505050505050565b90815260200190565b60006060825261256d606083018661220c565b828103602084015261257f818661220c565b91505060018060a01b0383166040830152949350505050565b6000604082526125ab604083018561220c565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252600b908201526a4f7574206f66206461746560a81b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b602080825260149082015273125d195b481a5cc81b9bdd081cdbdb19081e595d60621b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b60006020825261271a6020830184612238565b9392505050565b6000604082526125ab6040830185612238565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b60008482526060602083015261277c606083018561220c565b9050826040830152949350505050565b60405181810167ffffffffffffffff811182821017156127ab57600080fd5b604052919050565b600067ffffffffffffffff8211156127c9578081fd5b5060209081020190565b600067ffffffffffffffff8211156127e9578081fd5b50601f01601f191660200190565b60005b838110156128125781810151838201526020016127fa565b83811115612821576000848401525b50505050565b6005811061283157fe5b50565b6001600160a01b038116811461283157600080fd5b801515811461283157600080fd5b6005811061283157600080fdfea264697066735822122036dc8ecc7eec8f5c56e4cb48196002dbfaa43e854dcc6ef6bbdaf56e2531fd9f64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","5b611cf685838601611c5f565b6020840152611d088560408601611c01565b6040840152606084015160608401526080840151915080821115611d2b57600080fd5b50611d3884828501611c5f565b608083015250611d4b8360a08401611bf6565b60a0820152611d5d8360c08401611bf6565b60c0820152611d6f8360e08401611beb565b60e082015261010080830151818301525092915050565b60008060008060808587031215611d9b578384fd5b8435611da681612845565b93506020850135611db681612845565b9250604085013591506060850135611dcd8161285a565b939692955090935050565b600080600060608486031215611dec578283fd5b8335611df781612845565b92506020840135611e078161285a565b929592945050506040919091013590565b60008060408385031215611e2a578182fd5b8235611e3581612845565b946020939093013593505050565b60006020808385031215611e55578182fd5b825167ffffffffffffffff80821115611e6c578384fd5b81850186601f820112611e7d578485fd5b80519250611e8d611c2a846127c4565b83815284810190828601875b86811015611f125781518501606080601f19838f03011215611eb9578a8bfd5b611ec28161279d565b8a8301518152604083015189811115611ed9578c8dfd5b611ee78f8d83870101611c5f565b8c8301525081830151611ef981612868565b6040820152865250509287019290870190600101611e99565b50909998505050505050505050565b60006020808385031215611f33578182fd5b825167ffffffffffffffff811115611f49578283fd5b80840185601f820112611f5a578384fd5b80519150611f6a611c2a836127c4565b82815283810190828501865b85811015611f9f57611f8d8a888451880101611cac565b84529286019290860190600101611f76565b509098975050505050505050565b600060208284031215611fbe578081fd5b5035919050565b60008060408385031215611fd7578182fd5b50508035926020909101359150565b600080600060608486031215611ffa578081fd5b835167ffffffffffffffff80821115612011578283fd5b61201d87838801611c5f565b94506020860151915080821115612032578283fd5b5061203f86828701611c5f565b925050604084015161205081612845565b809150509250925092565b600080600080600060a08688031215612072578283fd5b853567ffffffffffffffff80821115612089578485fd5b61209589838a01611c0c565b96506020880135955060408801359150808211156120b1578485fd5b506120be88828901611c0c565b9598949750949560608101359550608001359392505050565b6000602082840312156120e8578081fd5b815167ffffffffffffffff8111156120fe578182fd5b61210a84828501611cac565b949350505050565b600060208284031215612123578081fd5b5051919050565b6000806040838503121561213c578182fd5b82359150602083013561214e8161285a565b809150509250929050565b60008060006060848603121561216d578081fd5b83519250602084015167ffffffffffffffff81111561218a578182fd5b61219686828701611c5f565b925050604084015190509250925092565b600080600080608085870312156121bc578182fd5b84359350602085013567ffffffffffffffff8111156121d9578283fd5b6121e587828801611c0c565b935050604085013591506060850135611dcd81612845565b6001600160a01b03169052565b15159052565b61221981612838565b9052565b60008151808452612235816020860160208601612808565b601f01601f19169290920160200192915050565b60006101208251845260208301518160208601526122698286018261221d565b6040850151925061227d6040870184612210565b606085015160608701526080850151925085810360808701526122a0818461221d565b91505060a084015191506122b760a086018361220a565b60c084015191506122cb60c086018361220a565b60e084015191506122df60e08601836121fd565b61010093840151949093019390935250919050565b6000868252855161230c816020850160208a01612808565b8083018660208201528551915061232a826040830160208901612808565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b600060018060a01b038616825284602083015260806040830152612435608083018561221d565b905082606083015295945050505050565b6001600160a01b03939093168352602083019190915260806040830181905260099083015268707265706172696e6760b81b60a0830152606082015260c00190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015611f9f57603f19898403018552815160608151855288820151818a8701526124da8287018261221d565b8984015192506124e983612838565b95890191909152505093860193908601906001016124ac565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561255557603f19888603018452612543858351612249565b94509285019290850190600101612527565b5092979650505050505050565b90815260200190565b60006060825261257e606083018661221d565b8281036020840152612590818661221d565b91505060018060a01b0383166040830152949350505050565b6000604082526125bc604083018561221d565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309039bab8383634b2b960511b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b602080825260149082015273125d195b481a5cc81b9bdd081cdbdb19081e595d60621b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b602080825260089082015267139bc8149a59da1d60c21b604082015260600190565b6020808252600b908201526a4f7574206f66206461746560a81b604082015260600190565b6020808252601690820152752cb7ba9030b932903737ba10309031b7b739bab6b2b960511b604082015260600190565b60006020825261272b6020830184612249565b9392505050565b6000604082526125bc6040830185612249565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b60008482526060602083015261278d606083018561221d565b9050826040830152949350505050565b60405181810167ffffffffffffffff811182821017156127bc57600080fd5b604052919050565b600067ffffffffffffffff8211156127da578081fd5b5060209081020190565b600067ffffffffffffffff8211156127fa578081fd5b50601f01601f191660200190565b60005b8381101561282357818101518382015260200161280b565b83811115612832576000848401525b50505050565b6005811061284257fe5b50565b6001600160a01b038116811461284257600080fd5b801515811461284257600080fd5b6005811061284257600080fdfea2646970667358221220293422e106b85ad8c6e1bfd9c3ab05c19e21b4e1743f4290237c65e9dbf0ed9864736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veri_Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewItemAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"typeSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSingleItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Type\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TraceStorage.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"chioce\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"handing_feedback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refundItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedbacker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"resolveAppeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSupplierToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"showWholeLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"enum TraceStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct TraceStorage.ItemLife[]\",\"name\":\"life\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_BUYITEM = "buyItem";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSINGLEITEM = "getSingleItem";

    public static final String FUNC_GETSOLDITEMS = "getSoldItems";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_HANDING_FEEDBACK = "handing_feedback";

    public static final String FUNC_IMPLEMENTATION = "implementation";

    public static final String FUNC_REFUNDITEM = "refundItem";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_REMOVEITEM = "removeItem";

    public static final String FUNC_RESOLVEAPPEAL = "resolveAppeal";

    public static final String FUNC_SHOWSUPPLIERTOKEN = "showSupplierToken";

    public static final String FUNC_SHOWWHOLELIFE = "showWholeLife";

    public static final String FUNC_TEST = "test";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final Event ITEMSOLD_EVENT = new Event("ItemSold",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWITEMADD_EVENT = new Event("NewItemAdd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ContractMarketService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ItemSoldEventResponse> getItemSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ITEMSOLD_EVENT, transactionReceipt);
        ArrayList<ItemSoldEventResponse> responses = new ArrayList<ItemSoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemSoldEventResponse typedResponse = new ItemSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeItemSoldEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeItemSoldEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NewItemAddEventResponse> getNewItemAddEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWITEMADD_EVENT, transactionReceipt);
        ArrayList<NewItemAddEventResponse> responses = new ArrayList<NewItemAddEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewItemAddEventResponse typedResponse = new NewItemAddEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewItemAddEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewItemAddEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt addItem(String name, BigInteger price, String description, BigInteger typeSet, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(String name, BigInteger price, String description, BigInteger typeSet, BigInteger counter, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(String name, BigInteger price, String description, BigInteger typeSet, BigInteger counter) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(typeSet),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(counter)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, BigInteger, BigInteger> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getAddItemOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public String admin() throws ContractException {
        final Function function = new Function(FUNC_ADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt buyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyItem(String seller, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBuyItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public Tuple3<String, String, byte[]> getBuyItemOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUYITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, byte[]>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue()
        );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public ContractStorageService.Item getSingleItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSINGLEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<ContractStorageService.Item>() {}));
        return executeCallWithSingleValueReturn(function, ContractStorageService.Item.class);
    }

    public DynamicArray<ContractStorageService.Item> getSoldItems() throws ContractException {
        final Function function = new Function(FUNC_GETSOLDITEMS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.Item>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple3<BigInteger, String, BigInteger> getStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt handing_feedback(String seller, Boolean chioce, byte[] hash) {
        final Function function = new Function(
                FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(chioce),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] handing_feedback(String seller, Boolean chioce, byte[] hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(chioce),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForHanding_feedback(String seller, Boolean chioce, byte[] hash) {
        final Function function = new Function(
                FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(chioce),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, byte[]> getHanding_feedbackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HANDING_FEEDBACK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, byte[]>(

                (String) results.get(0).getValue(),
                (Boolean) results.get(1).getValue(),
                (byte[]) results.get(2).getValue()
        );
    }

    public String implementation() throws ContractException {
        final Function function = new Function(FUNC_IMPLEMENTATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt refundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refundItem(byte[] hash, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefundItem(byte[] hash, BigInteger index) {
        final Function function = new Function(
                FUNC_REFUNDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], BigInteger> getRefundItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REFUNDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt registerAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(BigInteger choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt removeItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeItem(BigInteger index, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveItem(BigInteger index, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getRemoveItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
        );
    }

    public TransactionReceipt resolveAppeal(String feedbacker, String supplier, BigInteger token, Boolean choice) {
        final Function function = new Function(
                FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(token),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] resolveAppeal(String feedbacker, String supplier, BigInteger token, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(token),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForResolveAppeal(String feedbacker, String supplier, BigInteger token, Boolean choice) {
        final Function function = new Function(
                FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(feedbacker),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(supplier),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(token),
                        new org.fisco.bcos.sdk.abi.datatypes.Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, Boolean> getResolveAppealInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RESOLVEAPPEAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (Boolean) results.get(3).getValue()
        );
    }

    public BigInteger showSupplierToken() throws ContractException {
        final Function function = new Function(FUNC_SHOWSUPPLIERTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<ContractStorageService.ItemLife> showWholeLife(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_SHOWWHOLELIFE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractStorageService.ItemLife>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public String test() throws ContractException {
        final Function function = new Function(FUNC_TEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt updateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateStatus(BigInteger index, String place, BigInteger deliver, String seller) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(BigInteger index, String place, BigInteger deliver, String seller, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(BigInteger index, String place, BigInteger deliver, String seller) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(seller)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, String, BigInteger, String> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, String, BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue()
        );
    }

    public static ContractMarketService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractMarketService(contractAddress, client, credential);
    }

    public static ContractMarketService deploy(Client client, CryptoKeyPair credential, String storageAddress, String veri_Address, String token) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(storageAddress),
                new org.fisco.bcos.sdk.abi.datatypes.Address(veri_Address),
                new org.fisco.bcos.sdk.abi.datatypes.Address(token)));
        return deploy(ContractMarketService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class ItemSoldEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String buyer;

        public byte[] hash;
    }

    public static class NewItemAddEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String name;

        public BigInteger price;
    }
}