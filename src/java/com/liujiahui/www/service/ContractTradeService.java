package com.liujiahui.www.service;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ContractTradeService extends Contract {
    public static final String[] BINARY_ARRAY = {"","57805160ff1916838001178555610fa3565b82800160010185558215610fa3579182015b82811115610fa3578251825591602001919060010190610f88565b50610f31929150610ffa565b6040518060e001604052806000815260200160608152602001600081526020016060815260200160001515815260200160006001600160a01b03168152602001600080191681525090565b6101f491905b80821115610f315760008155600101611000565b600082601f830112611024578081fd5b813567ffffffffffffffff8082111561103b578283fd5b604051601f8301601f19168101602001828111828210171561105b578485fd5b60405282815292508284830160200186101561107657600080fd5b8260208601602083013760006020848301015250505092915050565b600080604083850312156110a4578182fd5b82356001600160a01b03811681146110ba578283fd5b946020939093013593505050565b6000602082840312156110d9578081fd5b5035919050565b6000806000606084860312156110f4578081fd5b833567ffffffffffffffff8082111561110b578283fd5b61111787838801611014565b9450602086013593506040860135915080821115611133578283fd5b5061114086828701611014565b9150509250925092565b60006020828403121561115b578081fd5b5051919050565b600080600060608486031215611176578283fd5b83359250602084013567ffffffffffffffff811115611193578283fd5b61119f86828701611014565b925050604084013590509250925092565b600080604083850312156111c2578182fd5b50508035926020909101359150565b600081518084526111e98160208601602086016114d9565b601f01601f19169290920160200192915050565b60008682528551611215816020850160208a016114d9565b808301866020820152855191506112338260408301602089016114d9565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561134157603f19898403018552815160e08151855288820151818a8701526112de828701826111d1565b898401518a880152606092508284015191508681038388015261130181836111d1565b60808581015115159089015260a0808601516001600160a01b03169089015260c094850151949097019390935250505093860193908601906001016112b0565b509098975050505050505050565b60006060825261136260608301866111d1565b828103602084015261137481866111d1565b91505060018060a01b0383166040830152949350505050565b6000604082526113a060408301856111d1565b90508260208301529392505050565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252601490820152732cb7ba9020b932902737ba1021b7b739bab6b2b960611b604082015260600190565b6020808252600e908201526d14995b9b9d1c985b9d0810d85b1b60921b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b6020808252600c908201526b139bdd0814dbdb190816595d60a21b604082015260600190565b6020808252601290820152712cb7ba902732bb32b9102932b3b4b9ba32b960711b604082015260600190565b90815260200190565b6000848252606060208301526114c960608301856111d1565b9050826040830152949350505050565b60005b838110156114f45781810151838201526020016114dc565b83811115611503576000848401525b5050505056fea264697066735822122037daee95d60205d03cb4ebd4fc40a39a6731ee028106ca8000c388b45f8bf11964736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526004805460ff1916905534801561001a57600080fd5b506040516115d93803806115d98339810160408190526100399161005e565b600080546001600160a01b0319166001600160a01b039290921691909117905561008c565b60006020828403121561006f578081fd5b81516001600160a01b0381168114610085578182fd5b9392505050565b61153e8061009b6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806355ea46391161006657806355ea46391461010d57806370ebc76a14610120578063ac1d2a8314610142578063c0f25f4314610155578063eda1cd8a1461015d57610093565b8063036b4e4114610098578063078806f3146100c357806314e6bf0d146100e3578063490d5467146100f8575b600080fd5b6100ab6100a63660046110c7565b610170565b6040516100ba9392919061134e565b60405180910390f35b6100d66100d13660046110df565b6102ec565b6040516100ba91906114a6565b6100f66100f13660046110c7565b6105ed565b005b610100610654565b6040516100ba919061128b565b6100f661011b366004611161565b61090c565b61013361012e3660046110c7565b6109f4565b6040516100ba939291906114af565b6100f66101503660046111af565b610acc565b6100d6610b03565b6100f661016b366004611091565b610b8a565b6060806000600260008581526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561021f5780601f106101f45761010080835404028352916020019161021f565b820191906000526020600020905b81548152906001019060200180831161020257829003601f168201915b505050600087815260026020818152604092839020600301805484516001821615610100026000190190911693909304601f8101839004830284018301909452838352959850909493509091508301828280156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b50505060009687525050600260205260409094206004015492946101009093046001600160a01b031692915050565b6000805460405163348de0b160e11b815282916001600160a01b03169063691bc1629061031d90339060040161125e565b60206040518083038186803b15801561033557600080fd5b505afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190611149565b9050806001148061037e5750806002145b6103a457604051636381e58960e11b815260040161039b90611454565b60405180910390fd5b806001146103c557604051636381e58960e11b815260040161039b906113ae565b33600081815260016020908152604080832054905190936103ee9285928b928b928b92016111fc565b60405160208183030381529060405280519060200120905061040e610f3a565b506040805160e08101825283815260208082018a81528284018a9052606083018990526000608084018190523360a0850181905260c0850187905281526001808452948120805480870182559082529083902084516006909202019081559051805193948594929361048593918501920190610f85565b5060408201516002820155606082015180516104ab916003840191602090910190610f85565b50608082015160048201805460a08501516001600160a01b031661010002610100600160a81b031993151560ff19909216919091179290921691909117905560c0909101516005909101556000828152600260209081526040909120825181558183015180518493610524926001850192910190610f85565b50604082015160028201556060820151805161054a916003840191602090910190610f85565b50608082015160048201805460a08501516001600160a01b031661010002610100600160a81b031993151560ff19909216919091179290921691909117905560c09091015160059091015560405133907f80e863492b63f6a162c0f7ef99ef9f59519410da2dc51148db147b762173afeb906105c9908b908b9061138c565b60405180910390a25050336000908152600160205260409020549695505050505050565b6000546040516311da8d2b60e31b81526001600160a01b0390911690638ed469589061061f9033908590600401611272565b600060405180830381600087803b15801561063957600080fd5b505af115801561064d573d6000803e3d6000fd5b5050505050565b6000805460405163348de0b160e11b8152606092916001600160a01b03169063691bc1629061068790339060040161125e565b60206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190611149565b905080600114806106e85750806002145b61070557604051636381e58960e11b815260040161039b90611454565b8060011461072657604051636381e58960e11b815260040161039b906113ae565b33600090815260016020908152604080832080548251818502810185019093528083529193909284015b8282101561090157838290600052602060002090600602016040518060e001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f600019610100600186161502019093169590950491820184900484028501840181528185529094019390918301828280156108b55780601f1061088a576101008083540402835291602001916108b5565b820191906000526020600020905b81548152906001019060200180831161089857829003601f168201915b5050509183525050600482015460ff811615156020808401919091526101009091046001600160a01b031660408301526005909201546060909101529082526001929092019101610750565b5050505091505b5090565b33600090815260016020526040902080548490811061092757fe5b600091825260209091206004600690920201015460ff16151560011461096057604051636381e58960e11b815260040161039b90611480565b33600090815260016020526040812080548590811061097b57fe5b906000526020600020906006020160050154905081600281111561099b57fe5b600082815260036020526040902060029081018054909160ff199091169060019084908111156109c757fe5b02179055506000818152600360209081526040909120428155845161064d92600190920191860190610f85565b6000818152600360209081526040808320600190810180548351600293821615610100026000190190911692909204601f8101859004850283018501909352828252606093859385939291830182828015610a905780601f10610a6557610100808354040283529160200191610a90565b820191906000526020600020905b815481529060010190602001808311610a7357829003601f168201915b505050600088815260036020526040902080546002918201549495509385935060ff169150811115610abe57fe5b935093509350509193909250565b336000908152600160205260409020805482919084908110610aea57fe5b9060005260206000209060060201600201819055505050565b60008054604051630fc6ebe160e21b81526001600160a01b0390911690633f1baf8490610b3490339060040161125e565b60206040518083038186803b158015610b4c57600080fd5b505afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611149565b90505b90565b60045460ff1615610bae57604051636381e58960e11b815260040161039b9061142c565b6004805460ff19166001179055610bc3610f3a565b6001600160a01b0383166000908152600160205260409020805483908110610be757fe5b90600052602060002090600602016040518060e001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ca35780601f10610c7857610100808354040283529160200191610ca3565b820191906000526020600020905b815481529060010190602001808311610c8657829003601f168201915b505050918352505060028281015460208084019190915260038401805460408051601f60001961010060018616150201909316959095049182018490048402850184018152818552909401939091830182828015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b5050509183525050600482015460ff81161515602083015261010090046001600160a01b03166040820152600590910154606090910152608081015190915015610d9f57604051636381e58960e11b815260040161039b90611406565b610da7610b03565b81604001511115610dcb57604051636381e58960e11b815260040161039b906113dc565b6001600160a01b0383166000908152600160208190526040909120805484908110610df257fe5b60009182526020822060046006909202018101805493151560ff19909416939093179092555460408084015190516311185c2760e01b81526001600160a01b03909216926311185c2792610e4a923392909101611272565b600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b50506000546040808501519051630ec12e8560e21b81526001600160a01b039092169350633b04ba149250610eb291879190600401611272565b600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b50505050826001600160a01b03167f57d08a4fd3fc53e9e9ebd1eb805cee904d0715a7cee14e0c9448435632d11be2338360c00151604051610f23929190611272565b60405180910390a250506004805460ff1916905550565b6040518060e0016040528060008152602001606081526020016000815260200160608152602001600015","15815260200160006001600160a01b03168152602001600080191681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fc657805160ff1916838001178555610ff3565b82800160010185558215610ff3579182015b82811115610ff3578251825591602001919060010190610fd8565b5061090892610b879250905b808211156109085760008155600101610fff565b600082601f830112611023578081fd5b813567ffffffffffffffff8082111561103a578283fd5b604051601f8301601f19168101602001828111828210171561105a578485fd5b60405282815292508284830160200186101561107557600080fd5b8260208601602083013760006020848301015250505092915050565b600080604083850312156110a3578182fd5b82356001600160a01b03811681146110b9578283fd5b946020939093013593505050565b6000602082840312156110d8578081fd5b5035919050565b6000806000606084860312156110f3578081fd5b833567ffffffffffffffff8082111561110a578283fd5b61111687838801611013565b9450602086013593506040860135915080821115611132578283fd5b5061113f86828701611013565b9150509250925092565b60006020828403121561115a578081fd5b5051919050565b600080600060608486031215611175578283fd5b83359250602084013567ffffffffffffffff811115611192578283fd5b61119e86828701611013565b925050604084013590509250925092565b600080604083850312156111c1578182fd5b50508035926020909101359150565b600081518084526111e88160208601602086016114d8565b601f01601f19169290920160200192915050565b60008682528551611214816020850160208a016114d8565b808301866020820152855191506112328260408301602089016114d8565b60609490941b6bffffffffffffffffffffffff1916604094909101938401525050605401949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561134057603f19898403018552815160e08151855288820151818a8701526112dd828701826111d0565b898401518a880152606092508284015191508681038388015261130081836111d0565b60808581015115159089015260a0808601516001600160a01b03169089015260c094850151949097019390935250505093860193908601906001016112af565b509098975050505050505050565b60006060825261136160608301866111d0565b828103602084015261137381866111d0565b91505060018060a01b0383166040830152949350505050565b60006040825261139f60408301856111d0565b90508260208301529392505050565b6020808252601490820152732cb7ba9020b932902737ba1021b7b739bab6b2b960611b604082015260600190565b60208082526010908201526f4e6f7420656e6f756768206d6f6e657960801b604082015260600190565b6020808252600c908201526b125d195b481a5cc81cdbdb1960a21b604082015260600190565b6020808252600e908201526d14995b9b9d1c985b9d0810d85b1b60921b604082015260600190565b6020808252601290820152712cb7ba902732bb32b9102932b3b4b9ba32b960711b604082015260600190565b6020808252600c908201526b139bdd0814dbdb190816595d60a21b604082015260600190565b90815260200190565b6000848252606060208301526114c860608301856111d0565b9050826040830152949350505050565b60005b838110156114f35781810151838201526020016114db565b83811115611502576000848401525b5050505056fea2646970667358221220c7cc887d2459da19cfd9a2f3f701b5a2ec7b86439d370c8928db52d5693b588264736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewItemAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"checkStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getRealItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ItemTrade.Item[]\",\"name\":\"itemSold\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"place\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deliver\",\"type\":\"uint256\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDITEM = "addItem";

    public static final String FUNC_BUYITEM = "buyItem";

    public static final String FUNC_CHECKSTATUS = "checkStatus";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETREALITEM = "getRealItem";

    public static final String FUNC_GETSOLDITEM = "getSoldItem";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_UPDATESTATUS = "updateStatus";

    public static final Event ITEMSOLD_EVENT = new Event("ItemSold",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWITEMADD_EVENT = new Event("NewItemAdd",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ContractTradeService(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ItemSoldEventResponse> getItemSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ITEMSOLD_EVENT, transactionReceipt);
        ArrayList<ItemSoldEventResponse> responses = new ArrayList<ItemSoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemSoldEventResponse typedResponse = new ItemSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeItemSoldEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeItemSoldEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ITEMSOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NewItemAddEventResponse> getNewItemAddEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWITEMADD_EVENT, transactionReceipt);
        ArrayList<NewItemAddEventResponse> responses = new ArrayList<NewItemAddEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewItemAddEventResponse typedResponse = new NewItemAddEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewItemAddEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewItemAddEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWITEMADD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt addItem(String name, BigInteger price, String description) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addItem(String name, BigInteger price, String description, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddItem(String name, BigInteger price, String description) {
        final Function function = new Function(
                FUNC_ADDITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getAddItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getAddItemOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt buyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyItem(String seller, BigInteger index, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyItem(String seller, BigInteger index) {
        final Function function = new Function(
                FUNC_BUYITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(seller),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBuyItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public Tuple3<BigInteger, String, BigInteger> checkStatus(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_CHECKSTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, String, String> getRealItem(byte[] hash) throws ContractException {
        final Function function = new Function(FUNC_GETREALITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public DynamicArray<ContractTradeService.Item> getSoldItem() throws ContractException {
        final Function function = new Function(FUNC_GETSOLDITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContractTradeService.Item>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt registerAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerAsset(BigInteger choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(BigInteger choice) {
        final Function function = new Function(
                FUNC_REGISTERASSET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt updateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateItem(BigInteger index, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateItem(BigInteger index, BigInteger price) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt updateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateStatus(BigInteger index, String place, BigInteger deliver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateStatus(BigInteger index, String place, BigInteger deliver) {
        final Function function = new Function(
                FUNC_UPDATESTATUS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(place),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(deliver)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getUpdateStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATESTATUS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public static ContractTradeService load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ContractTradeService(contractAddress, client, credential);
    }

    public static ContractTradeService deploy(Client client, CryptoKeyPair credential, String assetAddress) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)));
        return deploy(ContractTradeService.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Item extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger price;

        public String description;

        public Boolean isSold;

        public String seller;

        public byte[] hash;

        public Item(Uint256 id, Utf8String name, Uint256 price, Utf8String description, Bool isSold, Address seller, Bytes32 hash) {
            super(id,name,price,description,isSold,seller,hash);
            this.id = id.getValue();
            this.name = name.getValue();
            this.price = price.getValue();
            this.description = description.getValue();
            this.isSold = isSold.getValue();
            this.seller = seller.getValue();
            this.hash = hash.getValue();
        }

        public Item(BigInteger id, String name, BigInteger price, String description, Boolean isSold, String seller, byte[] hash) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Bool(isSold),new org.fisco.bcos.sdk.abi.datatypes.Address(seller),new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(hash));
            this.id = id;
            this.name = name;
            this.price = price;
            this.description = description;
            this.isSold = isSold;
            this.seller = seller;
            this.hash = hash;
        }
    }

    public static class ItemSoldEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String buyer;

        public byte[] hash;
    }

    public static class NewItemAddEventResponse {
        public TransactionReceipt.Logs log;

        public String seller;

        public String name;

        public BigInteger price;
    }
}